/*
 * Copyright (c) 2021 AGT Group (R&D) GmbH. All rights reserved.
 * Redistribution and use in source and binary form without the express
 * permission of the above copyright holder is not permitted.
 */

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// CoachAI Core Version: 13.2.3
// Generated On: 2022-06-13T13:29:09Z
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CoachAiEngine;
using System.Linq;
using UnityEngine;
using UnityEngine.Events;

namespace CoachAiEngine.Activities {

    [System.CodeDom.Compiler.GeneratedCode(tool: "Coach-Ai engine", version: "13.2.3")]
    [CreateAssetMenu(fileName = nameof(CircuitSpec), menuName = "Coach-AI Engine/Activities/Ball Sports/CircuitSpec")]
    public class CircuitSpec : CoachActivity {

        public override string ActivityId => "com.coachai.activities.ballsports.circuit.CircuitSpec";

        [Serializable]
        public class ActivityParameters {

            public static bool EnableCameraPlacement = true;
            public static float CircuitActivityStationDiameterParameter = 1.0f;
            public static int CallRepeatIntervalParameter = 5;
            public static bool SimplifiedRequirements = true;

            [Tooltip("Show where the camera can cover the whole activity with best results.")]
            public bool enableCameraPlacement = EnableCameraPlacement;
            [Tooltip("Diameter of the activity station")]
            public float circuitActivityStationDiameterParameter = CircuitActivityStationDiameterParameter;
            [Tooltip("Call repeat after certain seconds")]
            public int callRepeatIntervalParameter = CallRepeatIntervalParameter;
            [Tooltip("Instead of requesting complex shapes revert to cone requirements and automated constructs by parameters.")]
            public bool simplifiedRequirements = SimplifiedRequirements;
        }

        public ActivityParameters Activity;

        [Serializable]
        public class BallPresenceConfigParameters {

            public static bool BallPresenceEnableSizeErrorDetection = false;
            public static float BallPresenceExpectedBallDiameter = 0.22f;
            public static double BallPresenceMaxChangeFrequency = 1.0;

            [Tooltip("If enabled, the BallPresence event will provide indication whether the ball size is smaller or larger than the configured [BallDiameter] of the activity. At this time the size error detection triggers only if the ball size deviates strongly from the expected value. See `BallPresence` for further details.")]
            public bool ballPresenceEnableSizeErrorDetection = BallPresenceEnableSizeErrorDetection;
            [Tooltip("Expected diameter of the ball for ball presence detection.")]
            public float ballPresenceExpectedBallDiameter = BallPresenceExpectedBallDiameter;
            [Tooltip("Number of seconds between each ball presence update event.")]
            public double ballPresenceMaxChangeFrequency = BallPresenceMaxChangeFrequency;
        }

        public BallPresenceConfigParameters BallPresenceConfig;

        [Serializable]
        public class CameraPlacementConfigParameters {

            public static bool CameraPlacementFixedCameraHeight = false;
            public static float CameraPlacementFixedCameraHeightValue = 1.0f;
            public static bool CameraPlacementFixedRotation = false;
            public static bool CameraPlacementFixedRotationPortraitValue = false;

            [Tooltip("Enable usage of fixed value for the height of the camera, to avoid recalculations during movement.")]
            public bool cameraPlacementFixedCameraHeight = CameraPlacementFixedCameraHeight;
            [Tooltip("Assume camera is always at this height [m].")]
            public float cameraPlacementFixedCameraHeightValue = CameraPlacementFixedCameraHeightValue;
            [Tooltip("Enable usage of fixed value for the rotation of the camera, to avoid accidental recalculations")]
            public bool cameraPlacementFixedRotation = CameraPlacementFixedRotation;
            [Tooltip("Calculate the device rotation as being always Portrait or Landscape")]
            public bool cameraPlacementFixedRotationPortraitValue = CameraPlacementFixedRotationPortraitValue;
        }

        public CameraPlacementConfigParameters CameraPlacementConfig;

        [Serializable]
        public class DeadBallDetectorConfigParameters {

            public static bool AugmentedRealityMode = true;

            [Tooltip("Indicates if additional tracking data from Augmented Reality frameworks is available")]
            public bool augmentedRealityMode = AugmentedRealityMode;
        }

        public DeadBallDetectorConfigParameters DeadBallDetectorConfig;

        [Serializable]
        public class DetectionParameters {

            public static float BallDetectorConfidenceThreshold = 0.0f;
            public static float DiscardBelowGroundTolerance = 3.4028235E38f;
            public static BallModelType BallModel = BallModelType.BallBoxOffset2fMidRangeMediumV8;

            [Tooltip("Filter out ball detections with a confidence below this threshold. On value of 0 this threshold is being overridden by model specific defaults (recommended).")]
            public float ballDetectorConfidenceThreshold = BallDetectorConfidenceThreshold;
            [Tooltip("Define the maximum distance of detections below scanned ground plane to be discarded [m].")]
            public float discardBelowGroundTolerance = DiscardBelowGroundTolerance;
            [Tooltip("Choose a ball model. Please read model documentation to be aware of the use cases and limitations.")]
            public BallModelType ballModel = BallModel;
        }

        public DetectionParameters Detection;

        [Serializable]
        public class EventsParameters {

            public static bool PublishTrajectoryEvent = true;

            [Tooltip("Enable to publish Trajectory events for dependent analytics. Trajectory contains a list of [BallLocations] and [timestamps].")]
            public bool publishTrajectoryEvent = PublishTrajectoryEvent;
        }

        public EventsParameters Events;

        [Serializable]
        public class MultiBallTrackerConfigParameters {

            public static bool LocalizationOnGroundInfinitePlane = true;
            public static float LocalizationOnPlanePreferredYLocation = float.NaN;
            public static float BallDiameter = 0.22f;
            public static LocalizationTypeParameterType LocalizationTypeParameter = LocalizationTypeParameterType.ON_GROUND_PLANE_ONLY;
            public static float LocalizationOnGroundMaxYDeviation = 1.5f;

            [Tooltip("Localization on plane does not check extent. If disabled extent of each plane is considered.")]
            public bool localizationOnGroundInfinitePlane = LocalizationOnGroundInfinitePlane;
            [Tooltip("Localization on plane uses plane closest to provided preferred y location. This parameter can be updated at runtime [MultiBallTrackerConfig] Disabled with Float.NaN value!")]
            public float localizationOnPlanePreferredYLocation = LocalizationOnPlanePreferredYLocation;
            [Tooltip("Actual real diameter of ball to estimate the 3D ball position from the 2D ball detection based on the detected pixel size of the ball. This parameter can be updated at runtime [MultiBallTrackerConfig]")]
            public float ballDiameter = BallDiameter;
            [Tooltip("Localization Method to estimate 3D location of ball")]
            public LocalizationTypeParameterType localizationTypeParameter = LocalizationTypeParameter;
            [Tooltip("If results of localizeOnPlane and localize differ more than this in Y direction (usually gravity direction), the result is discarded.")]
            public float localizationOnGroundMaxYDeviation = LocalizationOnGroundMaxYDeviation;
        }

        public MultiBallTrackerConfigParameters MultiBallTrackerConfig;

        [Serializable]
        public class PerformanceParameters {

            public static int TargetFPS = 30;
            public static int MaximumPipelineThreads = 2;
            public static int MaximumInboundQueueSize = 2;

            [Tooltip("Set maximum allowed processed frames per second")]
            public int targetFPS = TargetFPS;
            [Tooltip("Defines how many threads are used to concurrently process inbound events.")]
            public int maximumPipelineThreads = MaximumPipelineThreads;
            [Tooltip("Set maximum allowed inbound events to put into processing queue")]
            public int maximumInboundQueueSize = MaximumInboundQueueSize;
        }

        public PerformanceParameters Performance;

        [Serializable]
        public class PoseTrackerConfigParameters {

            public static bool UsePoseSmoothing = false;
            public static float PoseSmoothingFactor = 0.1f;
            public static float PoseSmoothingMaxDisplacement = 20.0f;
            public static bool EnablePersonSegmentation = false;
            public static SortPoseByType SortPoseBy = SortPoseByType.AREA;
            public static PoseModelForFullFrameType PoseModelForFullFrame = PoseModelForFullFrameType.PoseMulti17lu1fDancingLightV12;
            public static bool EnablePose2DLocalizationOnGroundWithAR = true;

            [Tooltip("All detected poses will be smoothed over time as long as movements are not too quick.")]
            public bool usePoseSmoothing = UsePoseSmoothing;
            [Tooltip("A value of 1.0 means that the previous pose is not used for smoothing.")]
            public float poseSmoothingFactor = PoseSmoothingFactor;
            [Tooltip("No smoothing is applied if the current pose exceeds this threshold of movement (pixels). This will be reworked in a future release, to be based on person size not on pixels!")]
            public float poseSmoothingMaxDisplacement = PoseSmoothingMaxDisplacement;
            [Tooltip("Enable person segmentation output, if the model supports it.")]
            public bool enablePersonSegmentation = EnablePersonSegmentation;
            [Tooltip("Sort the poses on the basis of proximity, pose confidence or bounding box area")]
            public SortPoseByType sortPoseBy = SortPoseBy;
            [Tooltip("Choose a pose model to use for full frame detection, or initialization if adaptive region of interest is enabled.")]
            public PoseModelForFullFrameType poseModelForFullFrame = PoseModelForFullFrame;
            [Tooltip("Use AR planes to determine the location of Pose2D on the ground.")]
            public bool enablePose2DLocalizationOnGroundWithAR = EnablePose2DLocalizationOnGroundWithAR;
        }

        public PoseTrackerConfigParameters PoseTrackerConfig;

        [Serializable]
        public class ProcessingParameters {

            public static int MaximumInboundQueueSize = 2;

            [Tooltip("Set maximum allowed inbound events to put into processing queue")]
            public int maximumInboundQueueSize = MaximumInboundQueueSize;
        }

        public ProcessingParameters Processing;

        [Serializable]
        public class Region_of_InterestParameters {

            public static bool UsePersonDetectorForAdaptiveRegionOfInterest = true;
            public static PoseModelRoiType PoseModelRoi = PoseModelRoiType.PoseMulti17lu1fGeneralLightV7;

            [Tooltip("Use the [PersonDetectorResult] to (re-)initialize the region of interest in case the pose was lost. Enable this option if you expect the Pose to be far away from the phone and leaving and re-entering the camera view. If disabled, Pose2dResults are used to (re-)initialize the region of interest. Make sure to run the [PersonDetector] Analytics in addition to the [PoseTrackerAnalytics] to receive [PersonDetectorResult]s")]
            public bool usePersonDetectorForAdaptiveRegionOfInterest = UsePersonDetectorForAdaptiveRegionOfInterest;
            [Tooltip("Choose a pose model to be used within an adaptive region of interest.")]
            public PoseModelRoiType poseModelRoi = PoseModelRoi;
        }

        public Region_of_InterestParameters Region_of_Interest;

        [Serializable]
        public class Track_selectionParameters {

            public static int MOTTrackMinLengthParameter = 5;
            public static float MOTDontSelectTracksOlder = 0.5f;
            public static float MOTTrackMedianConfidenceThresholdParameter = 0.5f;

            [Tooltip("An object track with less than this minimum amount of detections cannot be detected as active.")]
            public int mOTTrackMinLengthParameter = MOTTrackMinLengthParameter;
            [Tooltip("An object track being inactive for longer than this period cannot be detected as active.")]
            public float mOTDontSelectTracksOlder = MOTDontSelectTracksOlder;
            [Tooltip("An object track with a median confidence of all contained detections lower than this value cannot be detected as active.")]
            public float mOTTrackMedianConfidenceThresholdParameter = MOTTrackMedianConfidenceThresholdParameter;
        }

        public Track_selectionParameters Track_selection;

        [Serializable]
        public class TrackingParameters {

            public static float MOTDetectionMaxLiveTimeParameter = 2.0f;
            public static MOTAssignmentMethodParameterType MOTAssignmentMethodParameter = MOTAssignmentMethodParameterType.Greedy;
            public static int MOTMatchingThresholdParameter = 50;

            [Tooltip("Remove object tracks being inactive for longer than this period.")]
            public float mOTDetectionMaxLiveTimeParameter = MOTDetectionMaxLiveTimeParameter;
            [Tooltip("Method to assign detections to object tracks. Hungarian: complete match with minimal error. Greedy: successive best match")]
            public MOTAssignmentMethodParameterType mOTAssignmentMethodParameter = MOTAssignmentMethodParameter;
            [Tooltip("To assign detections to already existing tracks the score between the detection and the prediction of the track must not exceed this threshold. Increase this value if you have faster moving objects or low frame rates. Lower this value if you have many slower moving objects or high frames rates. When the score is above the threshold then a new track is created from this detection.")]
            public int mOTMatchingThresholdParameter = MOTMatchingThresholdParameter;
        }

        public TrackingParameters Tracking;

        public override Dictionary<string, object> Parameters {
            get {
                var parameters = new Dictionary<string, object>();

                AddUnlessDefault("com.coachai.engine.cameraplacement.EnableCameraPlacement",
                    Activity.enableCameraPlacement, ActivityParameters.EnableCameraPlacement, parameters
                );
                AddUnlessDefault("com.coachai.activities.ballsports.circuit.CircuitActivityStationDiameterParameter",
                    Activity.circuitActivityStationDiameterParameter, ActivityParameters.CircuitActivityStationDiameterParameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.soccer.CallRepeatIntervalParameter",
                    Activity.callRepeatIntervalParameter, ActivityParameters.CallRepeatIntervalParameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.soccer.SimplifiedRequirements",
                    Activity.simplifiedRequirements, ActivityParameters.SimplifiedRequirements, parameters
                );

                AddUnlessDefault("com.coachai.engine.cameraplacement.CameraPlacementFixedCameraHeight",
                    CameraPlacementConfig.cameraPlacementFixedCameraHeight, CameraPlacementConfigParameters.CameraPlacementFixedCameraHeight, parameters
                );
                AddUnlessDefault("com.coachai.engine.cameraplacement.CameraPlacementFixedCameraHeightValue",
                    CameraPlacementConfig.cameraPlacementFixedCameraHeightValue, CameraPlacementConfigParameters.CameraPlacementFixedCameraHeightValue, parameters
                );
                AddUnlessDefault("com.coachai.engine.cameraplacement.CameraPlacementFixedRotation",
                    CameraPlacementConfig.cameraPlacementFixedRotation, CameraPlacementConfigParameters.CameraPlacementFixedRotation, parameters
                );
                AddUnlessDefault("com.coachai.engine.cameraplacement.CameraPlacementFixedRotationPortraitValue",
                    CameraPlacementConfig.cameraPlacementFixedRotationPortraitValue, CameraPlacementConfigParameters.CameraPlacementFixedRotationPortraitValue, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.components.BallPresenceEnableSizeErrorDetection",
                    BallPresenceConfig.ballPresenceEnableSizeErrorDetection, BallPresenceConfigParameters.BallPresenceEnableSizeErrorDetection, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.components.BallPresenceExpectedBallDiameter",
                    BallPresenceConfig.ballPresenceExpectedBallDiameter, BallPresenceConfigParameters.BallPresenceExpectedBallDiameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.components.BallPresenceMaxChangeFrequency",
                    BallPresenceConfig.ballPresenceMaxChangeFrequency, BallPresenceConfigParameters.BallPresenceMaxChangeFrequency, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.BallDetectorConfidenceThreshold",
                    Detection.ballDetectorConfidenceThreshold, DetectionParameters.BallDetectorConfidenceThreshold, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.DiscardBelowGroundTolerance",
                    Detection.discardBelowGroundTolerance, DetectionParameters.DiscardBelowGroundTolerance, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.BallModel",
                    BallModelTypeLookup[Detection.ballModel], BallModelTypeLookup[DetectionParameters.BallModel], parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationOnGroundInfinitePlane",
                    MultiBallTrackerConfig.localizationOnGroundInfinitePlane, MultiBallTrackerConfigParameters.LocalizationOnGroundInfinitePlane, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationOnPlanePreferredYLocation",
                    MultiBallTrackerConfig.localizationOnPlanePreferredYLocation, MultiBallTrackerConfigParameters.LocalizationOnPlanePreferredYLocation, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.BallDiameter",
                    MultiBallTrackerConfig.ballDiameter, MultiBallTrackerConfigParameters.BallDiameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationTypeParameter",
                    LocalizationTypeParameterTypeLookup[MultiBallTrackerConfig.localizationTypeParameter], LocalizationTypeParameterTypeLookup[MultiBallTrackerConfigParameters.LocalizationTypeParameter], parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationOnGroundMaxYDeviation",
                    MultiBallTrackerConfig.localizationOnGroundMaxYDeviation, MultiBallTrackerConfigParameters.LocalizationOnGroundMaxYDeviation, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTDetectionMaxLiveTimeParameter",
                    Tracking.mOTDetectionMaxLiveTimeParameter, TrackingParameters.MOTDetectionMaxLiveTimeParameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTAssignmentMethodParameter",
                    MOTAssignmentMethodParameterTypeLookup[Tracking.mOTAssignmentMethodParameter], MOTAssignmentMethodParameterTypeLookup[TrackingParameters.MOTAssignmentMethodParameter], parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTMatchingThresholdParameter",
                    Tracking.mOTMatchingThresholdParameter, TrackingParameters.MOTMatchingThresholdParameter, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTTrackMinLengthParameter",
                    Track_selection.mOTTrackMinLengthParameter, Track_selectionParameters.MOTTrackMinLengthParameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTDontSelectTracksOlder",
                    Track_selection.mOTDontSelectTracksOlder, Track_selectionParameters.MOTDontSelectTracksOlder, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTTrackMedianConfidenceThresholdParameter",
                    Track_selection.mOTTrackMedianConfidenceThresholdParameter, Track_selectionParameters.MOTTrackMedianConfidenceThresholdParameter, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MaximumInboundQueueSize",
                    Processing.maximumInboundQueueSize, ProcessingParameters.MaximumInboundQueueSize, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.PublishTrajectoryEvent",
                    Events.publishTrajectoryEvent, EventsParameters.PublishTrajectoryEvent, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.AugmentedRealityMode",
                    DeadBallDetectorConfig.augmentedRealityMode, DeadBallDetectorConfigParameters.AugmentedRealityMode, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.pose.components.UsePoseSmoothing",
                    PoseTrackerConfig.usePoseSmoothing, PoseTrackerConfigParameters.UsePoseSmoothing, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.PoseSmoothingFactor",
                    PoseTrackerConfig.poseSmoothingFactor, PoseTrackerConfigParameters.PoseSmoothingFactor, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.PoseSmoothingMaxDisplacement",
                    PoseTrackerConfig.poseSmoothingMaxDisplacement, PoseTrackerConfigParameters.PoseSmoothingMaxDisplacement, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.EnablePersonSegmentation",
                    PoseTrackerConfig.enablePersonSegmentation, PoseTrackerConfigParameters.EnablePersonSegmentation, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.SortPoseBy",
                    SortPoseByTypeLookup[PoseTrackerConfig.sortPoseBy], SortPoseByTypeLookup[PoseTrackerConfigParameters.SortPoseBy], parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.PoseModelForFullFrame",
                    PoseModelForFullFrameTypeLookup[PoseTrackerConfig.poseModelForFullFrame], PoseModelForFullFrameTypeLookup[PoseTrackerConfigParameters.PoseModelForFullFrame], parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.EnablePose2DLocalizationOnGroundWithAR",
                    PoseTrackerConfig.enablePose2DLocalizationOnGroundWithAR, PoseTrackerConfigParameters.EnablePose2DLocalizationOnGroundWithAR, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.pose.components.UsePersonDetectorForAdaptiveRegionOfInterest",
                    Region_of_Interest.usePersonDetectorForAdaptiveRegionOfInterest, Region_of_InterestParameters.UsePersonDetectorForAdaptiveRegionOfInterest, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.PoseModelRoi",
                    PoseModelRoiTypeLookup[Region_of_Interest.poseModelRoi], PoseModelRoiTypeLookup[Region_of_InterestParameters.PoseModelRoi], parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.pose.parameters.TargetFPS",
                    Performance.targetFPS, PerformanceParameters.TargetFPS, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.parameters.MaximumPipelineThreads",
                    Performance.maximumPipelineThreads, PerformanceParameters.MaximumPipelineThreads, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.parameters.MaximumInboundQueueSize",
                    Performance.maximumInboundQueueSize, PerformanceParameters.MaximumInboundQueueSize, parameters
                );

                return parameters;
            }
        }

        private void AddUnlessDefault<T>(string key, T value, T @default, Dictionary<string, object> parameters) {
            if (value.Equals(@default)) return;
            parameters.Add(key, value);
        }

        public override List<string> GetAvailableEvents() => AvailableEventsLookup.Values.ToList();

        public enum AvailableEvents {
            CameraPlacementLocations,
            MissingArPlanesIssue,
            PoseOutsidePlanesIssue,
            BallPresence
        }

        public Dictionary<AvailableEvents, string> AvailableEventsLookup = new Dictionary<AvailableEvents, string> {
            { AvailableEvents.CameraPlacementLocations, "com.coachai.engine.cameraplacement.CameraPlacementLocations" },
            { AvailableEvents.MissingArPlanesIssue, "com.coachai.engine.analytics.pose.MissingArPlanesIssue" },
            { AvailableEvents.PoseOutsidePlanesIssue, "com.coachai.engine.analytics.pose.PoseOutsidePlanesIssue" },
            { AvailableEvents.BallPresence, "com.coachai.engine.analytics.ball.BallPresence" }
        };

        public enum AvailableFeedback {
            PlaceTheBallOnTheCenterToStart,
            SuccessfulPlacement,
            FailedPlacement,
            Failure,
            InstructionSequenceSuccess,
            InstructionExplanation,
            ListInstructionExplanation,
            CheckYourReport,
            BallPresenceFeedback
        }

        public Dictionary<AvailableFeedback, string> AvailableFeedbackLookup = new Dictionary<AvailableFeedback, string> {
            { AvailableFeedback.PlaceTheBallOnTheCenterToStart, "com.coachai.activities.ballsports.circuit.PlaceTheBallOnTheCenterToStart" },
            { AvailableFeedback.SuccessfulPlacement, "com.coachai.engine.activity.feedback.SuccessfulPlacement" },
            { AvailableFeedback.FailedPlacement, "com.coachai.engine.activity.feedback.FailedPlacement" },
            { AvailableFeedback.Failure, "com.coachai.engine.activity.feedback.Failure" },
            { AvailableFeedback.InstructionSequenceSuccess, "com.coachai.activities.ballsports.circuit.InstructionSequenceSuccess" },
            { AvailableFeedback.InstructionExplanation, "com.coachai.activities.ballsports.circuit.InstructionExplanation" },
            { AvailableFeedback.ListInstructionExplanation, "com.coachai.activities.ballsports.circuit.ListInstructionExplanation" },
            { AvailableFeedback.CheckYourReport, "com.coachai.engine.activity.feedback.CheckYourReport" },
            { AvailableFeedback.BallPresenceFeedback, "com.coachai.engine.analytics.ball.BallPresenceFeedback" }
        };

        public enum AvailableMetrics {
            Score,
            TotalTime,
            InstructionSequenceList
        }

        public Dictionary<AvailableMetrics, string> AvailableMetricsLookup = new Dictionary<AvailableMetrics, string> {
            { AvailableMetrics.Score, "com.coachai.engine.activity.metric.Score" },
            { AvailableMetrics.TotalTime, "com.coachai.engine.activity.metric.TotalTime" },
            { AvailableMetrics.InstructionSequenceList, "com.coachai.activities.ballsports.circuit.InstructionSequenceList" }
        };

        public enum BallModelType {
            BallBox1fLongRangeMaxV4,
            BallBox1fMidRangeMediumV10,
            BallBox1fMidRangeMediumV9,
            BallBox1fMidRangeMediumV6,
            BallBox1fShortRangeLightV6,
            BallBox1fShortRangeLightV2,
            BallBoxOffset2fShortRangeLightV6,
            BallBoxOffset2fShortRangeLightV4,
            BallBoxOffset2fMidRangeMediumV8,
            BallBoxOffset2fMidRangeMediumV7
        }

        public Dictionary<BallModelType, string> BallModelTypeLookup = new Dictionary<BallModelType, string> {
            { BallModelType.BallBox1fLongRangeMaxV4, "ball.box.1f.long-range.max v4" },
            { BallModelType.BallBox1fMidRangeMediumV10, "ball.box.1f.mid-range.medium v10" },
            { BallModelType.BallBox1fMidRangeMediumV9, "ball.box.1f.mid-range.medium v9" },
            { BallModelType.BallBox1fMidRangeMediumV6, "ball.box.1f.mid-range.medium v6 (Deprecated)" },
            { BallModelType.BallBox1fShortRangeLightV6, "ball.box.1f.short-range.light v6" },
            { BallModelType.BallBox1fShortRangeLightV2, "ball.box.1f.short-range.light v2 (Deprecated)" },
            { BallModelType.BallBoxOffset2fShortRangeLightV6, "ball.box-offset.2f.short-range.light v6" },
            { BallModelType.BallBoxOffset2fShortRangeLightV4, "ball.box-offset.2f.short-range.light v4 (Deprecated)" },
            { BallModelType.BallBoxOffset2fMidRangeMediumV8, "ball.box-offset.2f.mid-range.medium v8" },
            { BallModelType.BallBoxOffset2fMidRangeMediumV7, "ball.box-offset.2f.mid-range.medium v7 (Deprecated)" }
        };

        public enum LocalizationTypeParameterType {
            SIZE_ONLY,
            ON_GROUND_PLANE_ONLY,
            ON_GROUND_PLANE_HYBRID
        }

        public Dictionary<LocalizationTypeParameterType, string> LocalizationTypeParameterTypeLookup = new Dictionary<LocalizationTypeParameterType, string> {
            { LocalizationTypeParameterType.SIZE_ONLY, "SIZE_ONLY" },
            { LocalizationTypeParameterType.ON_GROUND_PLANE_ONLY, "ON_GROUND_PLANE_ONLY" },
            { LocalizationTypeParameterType.ON_GROUND_PLANE_HYBRID, "ON_GROUND_PLANE_HYBRID" }
        };

        public enum SortPoseByType {
            ROI_CENTER_PROXIMITY,
            SCORE,
            AREA,
            EXTENDED_AREA
        }

        public Dictionary<SortPoseByType, string> SortPoseByTypeLookup = new Dictionary<SortPoseByType, string> {
            { SortPoseByType.ROI_CENTER_PROXIMITY, "ROI_CENTER_PROXIMITY" },
            { SortPoseByType.SCORE, "SCORE" },
            { SortPoseByType.AREA, "AREA" },
            { SortPoseByType.EXTENDED_AREA, "EXTENDED_AREA" }
        };

        public enum PoseModelForFullFrameType {
            PoseMulti17lu1fGeneralLightV7,
            PoseMulti17lu1fGeneralLightV2,
            PoseMulti17lu1fGeneralMediumV4,
            PoseMulti17lu1fDancingLightV12,
            PoseMulti17lu1fDancingLightV4,
            PoseMulti21flu1fDancingLightV1,
            PoseMulti25fhlu1fDancingLightV4,
            PoseSegMulti17lu1fDancingLightV1,
            PoseSegMulti25fhlu1fDancingLightV1,
            PoseSegMulti17lu1fGeneralLightV6,
            PoseSingle17lu1fFitnessMediumV2,
            PoseSingle17lu1fFitnessLightV2
        }

        public Dictionary<PoseModelForFullFrameType, string> PoseModelForFullFrameTypeLookup = new Dictionary<PoseModelForFullFrameType, string> {
            { PoseModelForFullFrameType.PoseMulti17lu1fGeneralLightV7, "pose.multi-17lu.1f.general.light v7" },
            { PoseModelForFullFrameType.PoseMulti17lu1fGeneralLightV2, "pose.multi-17lu.1f.general.light v2 (Deprecated)" },
            { PoseModelForFullFrameType.PoseMulti17lu1fGeneralMediumV4, "pose.multi-17lu.1f.general.medium v4" },
            { PoseModelForFullFrameType.PoseMulti17lu1fDancingLightV12, "pose.multi-17lu.1f.dancing.light v12" },
            { PoseModelForFullFrameType.PoseMulti17lu1fDancingLightV4, "pose.multi-17lu.1f.dancing.light v4" },
            { PoseModelForFullFrameType.PoseMulti21flu1fDancingLightV1, "pose.multi-21flu.1f.dancing.light v1" },
            { PoseModelForFullFrameType.PoseMulti25fhlu1fDancingLightV4, "pose.multi-25fhlu.1f.dancing.light v4" },
            { PoseModelForFullFrameType.PoseSegMulti17lu1fDancingLightV1, "pose.seg-multi-17lu.1f.dancing.light v1" },
            { PoseModelForFullFrameType.PoseSegMulti25fhlu1fDancingLightV1, "pose.seg-multi-25fhlu.1f.dancing.light v1" },
            { PoseModelForFullFrameType.PoseSegMulti17lu1fGeneralLightV6, "pose.seg-multi-17lu.1f.general.light v6" },
            { PoseModelForFullFrameType.PoseSingle17lu1fFitnessMediumV2, "pose.single-17lu.1f.fitness.medium v2" },
            { PoseModelForFullFrameType.PoseSingle17lu1fFitnessLightV2, "pose.single-17lu.1f.fitness.light v2" }
        };

        public enum PoseModelRoiType {
            PoseMulti17lu1fGeneralLightV7,
            PoseMulti17lu1fGeneralLightV2,
            PoseMulti17lu1fGeneralMediumV4,
            PoseMulti17lu1fDancingLightV12,
            PoseMulti17lu1fDancingLightV4,
            PoseMulti21flu1fDancingLightV1,
            PoseMulti25fhlu1fDancingLightV4,
            PoseSegMulti17lu1fDancingLightV1,
            PoseSegMulti25fhlu1fDancingLightV1,
            PoseSegMulti17lu1fGeneralLightV6,
            PoseSingle17lu1fFitnessMediumV2,
            PoseSingle17lu1fFitnessLightV2
        }

        public Dictionary<PoseModelRoiType, string> PoseModelRoiTypeLookup = new Dictionary<PoseModelRoiType, string> {
            { PoseModelRoiType.PoseMulti17lu1fGeneralLightV7, "pose.multi-17lu.1f.general.light v7" },
            { PoseModelRoiType.PoseMulti17lu1fGeneralLightV2, "pose.multi-17lu.1f.general.light v2 (Deprecated)" },
            { PoseModelRoiType.PoseMulti17lu1fGeneralMediumV4, "pose.multi-17lu.1f.general.medium v4" },
            { PoseModelRoiType.PoseMulti17lu1fDancingLightV12, "pose.multi-17lu.1f.dancing.light v12" },
            { PoseModelRoiType.PoseMulti17lu1fDancingLightV4, "pose.multi-17lu.1f.dancing.light v4" },
            { PoseModelRoiType.PoseMulti21flu1fDancingLightV1, "pose.multi-21flu.1f.dancing.light v1" },
            { PoseModelRoiType.PoseMulti25fhlu1fDancingLightV4, "pose.multi-25fhlu.1f.dancing.light v4" },
            { PoseModelRoiType.PoseSegMulti17lu1fDancingLightV1, "pose.seg-multi-17lu.1f.dancing.light v1" },
            { PoseModelRoiType.PoseSegMulti25fhlu1fDancingLightV1, "pose.seg-multi-25fhlu.1f.dancing.light v1" },
            { PoseModelRoiType.PoseSegMulti17lu1fGeneralLightV6, "pose.seg-multi-17lu.1f.general.light v6" },
            { PoseModelRoiType.PoseSingle17lu1fFitnessMediumV2, "pose.single-17lu.1f.fitness.medium v2" },
            { PoseModelRoiType.PoseSingle17lu1fFitnessLightV2, "pose.single-17lu.1f.fitness.light v2" }
        };

        public enum MOTAssignmentMethodParameterType {
            Hungarian,
            Greedy
        }

        public Dictionary<MOTAssignmentMethodParameterType, string> MOTAssignmentMethodParameterTypeLookup = new Dictionary<MOTAssignmentMethodParameterType, string> {
            { MOTAssignmentMethodParameterType.Hungarian, "Hungarian" },
            { MOTAssignmentMethodParameterType.Greedy, "Greedy" }
        };

    }
}   