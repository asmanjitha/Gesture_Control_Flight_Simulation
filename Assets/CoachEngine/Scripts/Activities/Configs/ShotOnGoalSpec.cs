/*
 * Copyright (c) 2021 AGT Group (R&D) GmbH. All rights reserved.
 * Redistribution and use in source and binary form without the express
 * permission of the above copyright holder is not permitted.
 */

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// CoachAI Core Version: 13.2.3
// Generated On: 2022-06-13T13:29:09Z
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CoachAiEngine;
using System.Linq;
using UnityEngine;
using UnityEngine.Events;

namespace CoachAiEngine.Activities {

    [System.CodeDom.Compiler.GeneratedCode(tool: "Coach-Ai engine", version: "13.2.3")]
    [CreateAssetMenu(fileName = nameof(ShotOnGoalSpec), menuName = "Coach-AI Engine/Activities/Ball Sports/ShotOnGoalSpec")]
    public class ShotOnGoalSpec : CoachActivity {

        public override string ActivityId => "com.coachai.activities.ballsports.shotongoal.ShotOnGoalSpec";

        [Serializable]
        public class ActivityParameters {

            public static int ShotOnGoalNumKicks = 0;
            public static float ShotOnGoalDistanceFromGoal = 1.0f;
            public static float MaxDistanceFromGoalParameter = 12.0f;
            public static int AvailableSectionsPerColumnParameter = 2;
            public static int AvailableSectionsPerRowParameter = 2;
            public static List<int> SectionListParameter = new List<int> { 1, 2, 3, 4 };

            [Tooltip("Number of kicks required to finish this challenge. Put to 0 to once cycle through given section order.")]
            public int shotOnGoalNumKicks = ShotOnGoalNumKicks;
            [Tooltip("Minimum distance to goal in meters. Any kick from a location closer to the goal will be ignored.")]
            public float shotOnGoalDistanceFromGoal = ShotOnGoalDistanceFromGoal;
            [Tooltip("Maximum distance to goal in meters. Any kick from a location further away from the goal will be ignored.")]
            public float maxDistanceFromGoalParameter = MaxDistanceFromGoalParameter;
            [Tooltip("How many sections per column. At least 1 column is required.")]
            public int availableSectionsPerColumnParameter = AvailableSectionsPerColumnParameter;
            [Tooltip("How many sections per row. At least 1 row is required.")]
            public int availableSectionsPerRowParameter = AvailableSectionsPerRowParameter;
            [Tooltip("Ordered list of sections representing which section to aim for. Section list is given as row-major bottom-to-top. That is, starting from bottom left continuing to the right. When the end of a row is reached then the next one is the leftmost cell one section up. As an example, in a 2x2 grid, section 1 is bottom left, 2 is bottom right, 3 is top left, 4 is top right. An empty list is not a valid value for this parameter.")]
            public List<int> sectionListParameter = SectionListParameter;
        }

        public ActivityParameters Activity;

        [Serializable]
        public class BallPresenceConfigParameters {

            public static bool BallPresenceEnableSizeErrorDetection = false;
            public static float BallPresenceExpectedBallDiameter = 0.22f;
            public static double BallPresenceMaxChangeFrequency = 1.0;

            [Tooltip("If enabled, the BallPresence event will provide indication whether the ball size is smaller or larger than the configured [BallDiameter] of the activity. At this time the size error detection triggers only if the ball size deviates strongly from the expected value. See `BallPresence` for further details.")]
            public bool ballPresenceEnableSizeErrorDetection = BallPresenceEnableSizeErrorDetection;
            [Tooltip("Expected diameter of the ball for ball presence detection.")]
            public float ballPresenceExpectedBallDiameter = BallPresenceExpectedBallDiameter;
            [Tooltip("Number of seconds between each ball presence update event.")]
            public double ballPresenceMaxChangeFrequency = BallPresenceMaxChangeFrequency;
        }

        public BallPresenceConfigParameters BallPresenceConfig;

        [Serializable]
        public class DetectionParameters {

            public static float BallDetectorConfidenceThreshold = 0.0f;
            public static float DiscardBelowGroundTolerance = 3.4028235E38f;
            public static BallModelType BallModel = BallModelType.BallBoxOffset2fMidRangeMediumV8;

            [Tooltip("Filter out ball detections with a confidence below this threshold. On value of 0 this threshold is being overridden by model specific defaults (recommended).")]
            public float ballDetectorConfidenceThreshold = BallDetectorConfidenceThreshold;
            [Tooltip("Define the maximum distance of detections below scanned ground plane to be discarded [m].")]
            public float discardBelowGroundTolerance = DiscardBelowGroundTolerance;
            [Tooltip("Choose a ball model. Please read model documentation to be aware of the use cases and limitations.")]
            public BallModelType ballModel = BallModel;
        }

        public DetectionParameters Detection;

        [Serializable]
        public class EventsParameters {

            public static bool PublishTrajectoryEvent = true;

            [Tooltip("Enable to publish Trajectory events for dependent analytics. Trajectory contains a list of [BallLocations] and [timestamps].")]
            public bool publishTrajectoryEvent = PublishTrajectoryEvent;
        }

        public EventsParameters Events;

        [Serializable]
        public class MultiBallTrackerConfigParameters {

            public static LocalizationTypeParameterType LocalizationTypeParameter = LocalizationTypeParameterType.SIZE_ONLY;
            public static bool LocalizationOnGroundInfinitePlane = true;
            public static float LocalizationOnPlanePreferredYLocation = float.NaN;
            public static float LocalizationOnGroundMaxYDeviation = 0.5f;
            public static float BallDiameter = 0.22f;

            [Tooltip("Localization Method to estimate 3D location of ball")]
            public LocalizationTypeParameterType localizationTypeParameter = LocalizationTypeParameter;
            [Tooltip("Localization on plane does not check extent. If disabled extent of each plane is considered.")]
            public bool localizationOnGroundInfinitePlane = LocalizationOnGroundInfinitePlane;
            [Tooltip("Localization on plane uses plane closest to provided preferred y location. This parameter can be updated at runtime [MultiBallTrackerConfig] Disabled with Float.NaN value!")]
            public float localizationOnPlanePreferredYLocation = LocalizationOnPlanePreferredYLocation;
            [Tooltip("If results of localizeOnPlane and localize differ more than this in Y direction (usually gravity direction), the result is discarded.")]
            public float localizationOnGroundMaxYDeviation = LocalizationOnGroundMaxYDeviation;
            [Tooltip("Actual real diameter of ball to estimate the 3D ball position from the 2D ball detection based on the detected pixel size of the ball. This parameter can be updated at runtime [MultiBallTrackerConfig]")]
            public float ballDiameter = BallDiameter;
        }

        public MultiBallTrackerConfigParameters MultiBallTrackerConfig;

        [Serializable]
        public class ProcessingParameters {

            public static int MaximumInboundQueueSize = 2;

            [Tooltip("Set maximum allowed inbound events to put into processing queue")]
            public int maximumInboundQueueSize = MaximumInboundQueueSize;
        }

        public ProcessingParameters Processing;

        [Serializable]
        public class Track_selectionParameters {

            public static int MOTTrackMinLengthParameter = 5;
            public static float MOTDontSelectTracksOlder = 0.5f;
            public static float MOTTrackMedianConfidenceThresholdParameter = 0.5f;

            [Tooltip("An object track with less than this minimum amount of detections cannot be detected as active.")]
            public int mOTTrackMinLengthParameter = MOTTrackMinLengthParameter;
            [Tooltip("An object track being inactive for longer than this period cannot be detected as active.")]
            public float mOTDontSelectTracksOlder = MOTDontSelectTracksOlder;
            [Tooltip("An object track with a median confidence of all contained detections lower than this value cannot be detected as active.")]
            public float mOTTrackMedianConfidenceThresholdParameter = MOTTrackMedianConfidenceThresholdParameter;
        }

        public Track_selectionParameters Track_selection;

        [Serializable]
        public class TrackingParameters {

            public static float MOTDetectionMaxLiveTimeParameter = 2.0f;
            public static MOTAssignmentMethodParameterType MOTAssignmentMethodParameter = MOTAssignmentMethodParameterType.Greedy;
            public static int MOTMatchingThresholdParameter = 50;

            [Tooltip("Remove object tracks being inactive for longer than this period.")]
            public float mOTDetectionMaxLiveTimeParameter = MOTDetectionMaxLiveTimeParameter;
            [Tooltip("Method to assign detections to object tracks. Hungarian: complete match with minimal error. Greedy: successive best match")]
            public MOTAssignmentMethodParameterType mOTAssignmentMethodParameter = MOTAssignmentMethodParameter;
            [Tooltip("To assign detections to already existing tracks the score between the detection and the prediction of the track must not exceed this threshold. Increase this value if you have faster moving objects or low frame rates. Lower this value if you have many slower moving objects or high frames rates. When the score is above the threshold then a new track is created from this detection.")]
            public int mOTMatchingThresholdParameter = MOTMatchingThresholdParameter;
        }

        public TrackingParameters Tracking;

        public override Dictionary<string, object> Parameters {
            get {
                var parameters = new Dictionary<string, object>();

                AddUnlessDefault("com.coachai.engine.analytics.ball.components.BallPresenceEnableSizeErrorDetection",
                    BallPresenceConfig.ballPresenceEnableSizeErrorDetection, BallPresenceConfigParameters.BallPresenceEnableSizeErrorDetection, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.components.BallPresenceExpectedBallDiameter",
                    BallPresenceConfig.ballPresenceExpectedBallDiameter, BallPresenceConfigParameters.BallPresenceExpectedBallDiameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.components.BallPresenceMaxChangeFrequency",
                    BallPresenceConfig.ballPresenceMaxChangeFrequency, BallPresenceConfigParameters.BallPresenceMaxChangeFrequency, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.BallDetectorConfidenceThreshold",
                    Detection.ballDetectorConfidenceThreshold, DetectionParameters.BallDetectorConfidenceThreshold, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.DiscardBelowGroundTolerance",
                    Detection.discardBelowGroundTolerance, DetectionParameters.DiscardBelowGroundTolerance, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.BallModel",
                    BallModelTypeLookup[Detection.ballModel], BallModelTypeLookup[DetectionParameters.BallModel], parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationTypeParameter",
                    LocalizationTypeParameterTypeLookup[MultiBallTrackerConfig.localizationTypeParameter], LocalizationTypeParameterTypeLookup[MultiBallTrackerConfigParameters.LocalizationTypeParameter], parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationOnGroundInfinitePlane",
                    MultiBallTrackerConfig.localizationOnGroundInfinitePlane, MultiBallTrackerConfigParameters.LocalizationOnGroundInfinitePlane, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationOnPlanePreferredYLocation",
                    MultiBallTrackerConfig.localizationOnPlanePreferredYLocation, MultiBallTrackerConfigParameters.LocalizationOnPlanePreferredYLocation, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationOnGroundMaxYDeviation",
                    MultiBallTrackerConfig.localizationOnGroundMaxYDeviation, MultiBallTrackerConfigParameters.LocalizationOnGroundMaxYDeviation, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.BallDiameter",
                    MultiBallTrackerConfig.ballDiameter, MultiBallTrackerConfigParameters.BallDiameter, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTDetectionMaxLiveTimeParameter",
                    Tracking.mOTDetectionMaxLiveTimeParameter, TrackingParameters.MOTDetectionMaxLiveTimeParameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTAssignmentMethodParameter",
                    MOTAssignmentMethodParameterTypeLookup[Tracking.mOTAssignmentMethodParameter], MOTAssignmentMethodParameterTypeLookup[TrackingParameters.MOTAssignmentMethodParameter], parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTMatchingThresholdParameter",
                    Tracking.mOTMatchingThresholdParameter, TrackingParameters.MOTMatchingThresholdParameter, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTTrackMinLengthParameter",
                    Track_selection.mOTTrackMinLengthParameter, Track_selectionParameters.MOTTrackMinLengthParameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTDontSelectTracksOlder",
                    Track_selection.mOTDontSelectTracksOlder, Track_selectionParameters.MOTDontSelectTracksOlder, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTTrackMedianConfidenceThresholdParameter",
                    Track_selection.mOTTrackMedianConfidenceThresholdParameter, Track_selectionParameters.MOTTrackMedianConfidenceThresholdParameter, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MaximumInboundQueueSize",
                    Processing.maximumInboundQueueSize, ProcessingParameters.MaximumInboundQueueSize, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.PublishTrajectoryEvent",
                    Events.publishTrajectoryEvent, EventsParameters.PublishTrajectoryEvent, parameters
                );

                AddUnlessDefault("ShotOnGoalNumKicks",
                    Activity.shotOnGoalNumKicks, ActivityParameters.ShotOnGoalNumKicks, parameters
                );
                AddUnlessDefault("ShotOnGoalDistanceFromGoal",
                    Activity.shotOnGoalDistanceFromGoal, ActivityParameters.ShotOnGoalDistanceFromGoal, parameters
                );
                AddUnlessDefault("com.coachai.activities.ballsports.shotongoal.MaxDistanceFromGoalParameter",
                    Activity.maxDistanceFromGoalParameter, ActivityParameters.MaxDistanceFromGoalParameter, parameters
                );
                AddUnlessDefault("com.coachai.activities.ballsports.shotongoal.AvailableSectionsPerColumnParameter",
                    Activity.availableSectionsPerColumnParameter, ActivityParameters.AvailableSectionsPerColumnParameter, parameters
                );
                AddUnlessDefault("com.coachai.activities.ballsports.shotongoal.AvailableSectionsPerRowParameter",
                    Activity.availableSectionsPerRowParameter, ActivityParameters.AvailableSectionsPerRowParameter, parameters
                );
                AddUnlessDefault("com.coachai.activities.ballsports.shotongoal.SectionListParameter",
                    Activity.sectionListParameter, ActivityParameters.SectionListParameter, parameters
                );

                return parameters;
            }
        }

        private void AddUnlessDefault<T>(string key, T value, T @default, Dictionary<string, object> parameters) {
            if (value.Equals(@default)) return;
            parameters.Add(key, value);
        }

        public override List<string> GetAvailableEvents() => AvailableEventsLookup.Values.ToList();

        public enum AvailableEvents {
            GoalKickResult,
            BallPresence
        }

        public Dictionary<AvailableEvents, string> AvailableEventsLookup = new Dictionary<AvailableEvents, string> {
            { AvailableEvents.GoalKickResult, "com.coachai.engine.analytics.soccer.GoalKickResult" },
            { AvailableEvents.BallPresence, "com.coachai.engine.analytics.ball.BallPresence" }
        };

        public enum AvailableFeedback {
            KickTheBallIntoTheGoal,
            GoalHit,
            GoalMiss,
            TooClose
        }

        public Dictionary<AvailableFeedback, string> AvailableFeedbackLookup = new Dictionary<AvailableFeedback, string> {
            { AvailableFeedback.KickTheBallIntoTheGoal, "com.coachai.engine.analytics.soccer.KickTheBallIntoTheGoal" },
            { AvailableFeedback.GoalHit, "com.coachai.engine.analytics.soccer.GoalHit" },
            { AvailableFeedback.GoalMiss, "com.coachai.engine.analytics.soccer.GoalMiss" },
            { AvailableFeedback.TooClose, "com.coachai.engine.activity.feedback.TooClose" }
        };

        public enum AvailableMetrics {
            Score,
            Hits,
            Miss,
            AverageKickSpeed,
            NumberOfKicks
        }

        public Dictionary<AvailableMetrics, string> AvailableMetricsLookup = new Dictionary<AvailableMetrics, string> {
            { AvailableMetrics.Score, "com.coachai.engine.activity.metric.Score" },
            { AvailableMetrics.Hits, "com.coachai.activities.ballsports.shotongoal.Hits" },
            { AvailableMetrics.Miss, "com.coachai.activities.ballsports.shotongoal.Miss" },
            { AvailableMetrics.AverageKickSpeed, "com.coachai.activities.ballsports.shotongoal.AverageKickSpeed" },
            { AvailableMetrics.NumberOfKicks, "com.coachai.activities.ballsports.shotongoal.NumberOfKicks" }
        };

        public enum BallModelType {
            BallBox1fLongRangeMaxV4,
            BallBox1fMidRangeMediumV10,
            BallBox1fMidRangeMediumV9,
            BallBox1fMidRangeMediumV6,
            BallBox1fShortRangeLightV6,
            BallBox1fShortRangeLightV2,
            BallBoxOffset2fShortRangeLightV6,
            BallBoxOffset2fShortRangeLightV4,
            BallBoxOffset2fMidRangeMediumV8,
            BallBoxOffset2fMidRangeMediumV7
        }

        public Dictionary<BallModelType, string> BallModelTypeLookup = new Dictionary<BallModelType, string> {
            { BallModelType.BallBox1fLongRangeMaxV4, "ball.box.1f.long-range.max v4" },
            { BallModelType.BallBox1fMidRangeMediumV10, "ball.box.1f.mid-range.medium v10" },
            { BallModelType.BallBox1fMidRangeMediumV9, "ball.box.1f.mid-range.medium v9" },
            { BallModelType.BallBox1fMidRangeMediumV6, "ball.box.1f.mid-range.medium v6 (Deprecated)" },
            { BallModelType.BallBox1fShortRangeLightV6, "ball.box.1f.short-range.light v6" },
            { BallModelType.BallBox1fShortRangeLightV2, "ball.box.1f.short-range.light v2 (Deprecated)" },
            { BallModelType.BallBoxOffset2fShortRangeLightV6, "ball.box-offset.2f.short-range.light v6" },
            { BallModelType.BallBoxOffset2fShortRangeLightV4, "ball.box-offset.2f.short-range.light v4 (Deprecated)" },
            { BallModelType.BallBoxOffset2fMidRangeMediumV8, "ball.box-offset.2f.mid-range.medium v8" },
            { BallModelType.BallBoxOffset2fMidRangeMediumV7, "ball.box-offset.2f.mid-range.medium v7 (Deprecated)" }
        };

        public enum LocalizationTypeParameterType {
            SIZE_ONLY,
            ON_GROUND_PLANE_ONLY,
            ON_GROUND_PLANE_HYBRID
        }

        public Dictionary<LocalizationTypeParameterType, string> LocalizationTypeParameterTypeLookup = new Dictionary<LocalizationTypeParameterType, string> {
            { LocalizationTypeParameterType.SIZE_ONLY, "SIZE_ONLY" },
            { LocalizationTypeParameterType.ON_GROUND_PLANE_ONLY, "ON_GROUND_PLANE_ONLY" },
            { LocalizationTypeParameterType.ON_GROUND_PLANE_HYBRID, "ON_GROUND_PLANE_HYBRID" }
        };

        public enum MOTAssignmentMethodParameterType {
            Hungarian,
            Greedy
        }

        public Dictionary<MOTAssignmentMethodParameterType, string> MOTAssignmentMethodParameterTypeLookup = new Dictionary<MOTAssignmentMethodParameterType, string> {
            { MOTAssignmentMethodParameterType.Hungarian, "Hungarian" },
            { MOTAssignmentMethodParameterType.Greedy, "Greedy" }
        };

    }
}   