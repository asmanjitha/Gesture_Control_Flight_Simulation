/*
 * Copyright (c) 2021 AGT Group (R&D) GmbH. All rights reserved.
 * Redistribution and use in source and binary form without the express
 * permission of the above copyright holder is not permitted.
 */

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// CoachAI Core Version: 13.2.3
// Generated On: 2022-06-13T13:29:09Z
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CoachAiEngine;
using System.Linq;
using UnityEngine;
using UnityEngine.Events;

namespace CoachAiEngine.Activities {

    [System.CodeDom.Compiler.GeneratedCode(tool: "Coach-Ai engine", version: "13.2.3")]
    [CreateAssetMenu(fileName = nameof(MultiBallActivitySpec), menuName = "Coach-AI Engine/Activities/Ball Sports/MultiBallActivitySpec")]
    public class MultiBallActivitySpec : CoachActivity {

        public override string ActivityId => "com.coachai.activities.ballsports.multiball.MultiBallActivitySpec";

        [Serializable]
        public class ARPublisherConfigParameters {

            public static int TargetFPS = 30;

            [Tooltip("Set maximum allowed processed camera frames per second")]
            public int targetFPS = TargetFPS;
        }

        public ARPublisherConfigParameters ARPublisherConfig;

        [Serializable]
        public class BallPresenceConfigParameters {

            public static bool BallPresenceEnableSizeErrorDetection = false;
            public static float BallPresenceExpectedBallDiameter = 0.22f;
            public static double BallPresenceMaxChangeFrequency = 1.0;

            [Tooltip("If enabled, the BallPresence event will provide indication whether the ball size is smaller or larger than the configured [BallDiameter] of the activity. At this time the size error detection triggers only if the ball size deviates strongly from the expected value. See `BallPresence` for further details.")]
            public bool ballPresenceEnableSizeErrorDetection = BallPresenceEnableSizeErrorDetection;
            [Tooltip("Expected diameter of the ball for ball presence detection.")]
            public float ballPresenceExpectedBallDiameter = BallPresenceExpectedBallDiameter;
            [Tooltip("Number of seconds between each ball presence update event.")]
            public double ballPresenceMaxChangeFrequency = BallPresenceMaxChangeFrequency;
        }

        public BallPresenceConfigParameters BallPresenceConfig;

        [Serializable]
        public class DetectionParameters {

            public static float BallDetectorConfidenceThreshold = 0.0f;
            public static float DiscardBelowGroundTolerance = 3.4028235E38f;
            public static BallModelType BallModel = BallModelType.BallBox1fMidRangeMediumV10;

            [Tooltip("Filter out ball detections with a confidence below this threshold. On value of 0 this threshold is being overridden by model specific defaults (recommended).")]
            public float ballDetectorConfidenceThreshold = BallDetectorConfidenceThreshold;
            [Tooltip("Define the maximum distance of detections below scanned ground plane to be discarded [m].")]
            public float discardBelowGroundTolerance = DiscardBelowGroundTolerance;
            [Tooltip("Choose a ball model. Please read model documentation to be aware of the use cases and limitations.")]
            public BallModelType ballModel = BallModel;
        }

        public DetectionParameters Detection;

        [Serializable]
        public class EventsParameters {

            public static bool PublishTrajectoryEvent = true;

            [Tooltip("Enable to publish Trajectory events for dependent analytics. Trajectory contains a list of [BallLocations] and [timestamps].")]
            public bool publishTrajectoryEvent = PublishTrajectoryEvent;
        }

        public EventsParameters Events;

        [Serializable]
        public class IntersectionDetectorConfigParameters {

            public static float IntersectionDetectorConfigMinDeltaV = 3.0f;
            public static float IntersectionDetectorConfigMaxDeltaV = 42.0f;
            public static float IntersectionDetectorConfigMaxTError = 0.1f;
            public static float IntersectionDetectorConfigMaxXError = 1.0f;
            public static float IntersectionDetectorConfigRelVFactor = 0.1f;

            [Tooltip("Return trajectory changes for dv above this value")]
            public float intersectionDetectorConfigMinDeltaV = IntersectionDetectorConfigMinDeltaV;
            [Tooltip("RFilter out trajectory change events based on this threshold. 42m/s seems to be the max human capable speed.")]
            public float intersectionDetectorConfigMaxDeltaV = IntersectionDetectorConfigMaxDeltaV;
            [Tooltip("maximal temporal distance between parabolas")]
            public float intersectionDetectorConfigMaxTError = IntersectionDetectorConfigMaxTError;
            [Tooltip("maximal location distance between parabolas")]
            public float intersectionDetectorConfigMaxXError = IntersectionDetectorConfigMaxXError;
            [Tooltip("fraction of the velocity that contributes to the check for change in velocity at intersection in addition to minDeltaV.This is the dynamic part of the check.")]
            public float intersectionDetectorConfigRelVFactor = IntersectionDetectorConfigRelVFactor;
        }

        public IntersectionDetectorConfigParameters IntersectionDetectorConfig;

        [Serializable]
        public class MultiBallTrackerConfigParameters {

            public static LocalizationTypeParameterType LocalizationTypeParameter = LocalizationTypeParameterType.SIZE_ONLY;
            public static bool LocalizationOnGroundInfinitePlane = true;
            public static float LocalizationOnPlanePreferredYLocation = float.NaN;
            public static float LocalizationOnGroundMaxYDeviation = 0.5f;
            public static float BallDiameter = 0.22f;

            [Tooltip("Localization Method to estimate 3D location of ball")]
            public LocalizationTypeParameterType localizationTypeParameter = LocalizationTypeParameter;
            [Tooltip("Localization on plane does not check extent. If disabled extent of each plane is considered.")]
            public bool localizationOnGroundInfinitePlane = LocalizationOnGroundInfinitePlane;
            [Tooltip("Localization on plane uses plane closest to provided preferred y location. This parameter can be updated at runtime [MultiBallTrackerConfig] Disabled with Float.NaN value!")]
            public float localizationOnPlanePreferredYLocation = LocalizationOnPlanePreferredYLocation;
            [Tooltip("If results of localizeOnPlane and localize differ more than this in Y direction (usually gravity direction), the result is discarded.")]
            public float localizationOnGroundMaxYDeviation = LocalizationOnGroundMaxYDeviation;
            [Tooltip("Actual real diameter of ball to estimate the 3D ball position from the 2D ball detection based on the detected pixel size of the ball. This parameter can be updated at runtime [MultiBallTrackerConfig]")]
            public float ballDiameter = BallDiameter;
        }

        public MultiBallTrackerConfigParameters MultiBallTrackerConfig;

        [Serializable]
        public class ParabolaBasicConfigParameters {

            public static List<float> ParabolaBasicConfigBouncingWeightsDimsNorm = new List<float> { 0.1f, 0.8f, 0.1f };
            public static double ParabolaBasicConfigTimeDiffToMergeIntersections = 0.2;
            public static double ParabolaBasicConfigMinDeltaVNorm = 1.5;
            public static double ParabolaBasicConfigMinVNormAmplitudeBounce = 0.3;
            public static double ParabolaBasicConfigMaxVNormAmplitudeBounce = 0.3;

            [Tooltip("weighting factors for tuning impact detections")]
            public List<float> parabolaBasicConfigBouncingWeightsDimsNorm = ParabolaBasicConfigBouncingWeightsDimsNorm;
            [Tooltip("minimal time difference between two impacts (intersections) to treat them as individual impacts")]
            public double parabolaBasicConfigTimeDiffToMergeIntersections = ParabolaBasicConfigTimeDiffToMergeIntersections;
            [Tooltip("minimal difference of speed before and after an impact")]
            public double parabolaBasicConfigMinDeltaVNorm = ParabolaBasicConfigMinDeltaVNorm;
            [Tooltip("minimal speed before and after an impact")]
            public double parabolaBasicConfigMinVNormAmplitudeBounce = ParabolaBasicConfigMinVNormAmplitudeBounce;
            [Tooltip("speed threshold for kickoff detection")]
            public double parabolaBasicConfigMaxVNormAmplitudeBounce = ParabolaBasicConfigMaxVNormAmplitudeBounce;
        }

        public ParabolaBasicConfigParameters ParabolaBasicConfig;

        [Serializable]
        public class ParabolaOutlierDetectorConfigParameters {

            public static int ParabolaOutlierDetectorWindowSize = 3;
            public static int ParabolaOutlierDetectorMinClusterSize = 2;
            public static float ParabolaOutlierDetectorMaxDeltaV = 2.0f;
            public static float ParabolaOutlierDetectorMaxTError = 0.1f;
            public static float ParabolaOutlierDetectorMaxXError = 1.0f;
            public static bool ParabolaOutlierDetectorActive = true;

            [Tooltip("sliding window size on partial parabolas to filter outliers")]
            public int parabolaOutlierDetectorWindowSize = ParabolaOutlierDetectorWindowSize;
            [Tooltip("minimal size of cluster of parabolas")]
            public int parabolaOutlierDetectorMinClusterSize = ParabolaOutlierDetectorMinClusterSize;
            [Tooltip("maximal allowed difference in velocity to add parabolas to the same cluster")]
            public float parabolaOutlierDetectorMaxDeltaV = ParabolaOutlierDetectorMaxDeltaV;
            [Tooltip("maximal temporal distance between parabolas")]
            public float parabolaOutlierDetectorMaxTError = ParabolaOutlierDetectorMaxTError;
            [Tooltip("maximal location distance between parabolas")]
            public float parabolaOutlierDetectorMaxXError = ParabolaOutlierDetectorMaxXError;
            [Tooltip("indicate if outlier detector should be used or not")]
            public bool parabolaOutlierDetectorActive = ParabolaOutlierDetectorActive;
        }

        public ParabolaOutlierDetectorConfigParameters ParabolaOutlierDetectorConfig;

        [Serializable]
        public class PartialParabolaFitConfigParameters {

            public static int PartialParabolaFitWindowSize = 10;
            public static float PartialParabolaMaxVelocity = 42.0f;
            public static float PartialParabolaMinInliersRatio = 0.33f;
            public static float PartialParabolaScoreThreshold = 0.85f;
            public static int PartialParabolaMaxIterations = 100;
            public static float PartialParabolaMaxVGravity = 1.0f;
            public static int PartialParabolaGravityAxisIndex = 1;
            public static float PartialParabolaGravity = 9.807f;
            public static float PartialParabolaStopProbability = 0.99f;
            public static float PartialParabolaInliersRatio = 0.4f;

            [Tooltip("sliding window size on data points to fit a parabola on. Currently only values from 8 to 10 are allowed.")]
            public int partialParabolaFitWindowSize = PartialParabolaFitWindowSize;
            [Tooltip("faster trajectories are considered as outliers. 42m/s is the fastest trajectory a human can kick")]
            public float partialParabolaMaxVelocity = PartialParabolaMaxVelocity;
            [Tooltip("Number of inliers required for model acceptance in percentage [0, 1]")]
            public float partialParabolaMinInliersRatio = PartialParabolaMinInliersRatio;
            [Tooltip("Score at which a data point passed into base_model.score_samples is considered as inlier in confidence [0, 1]")]
            public float partialParabolaScoreThreshold = PartialParabolaScoreThreshold;
            [Tooltip("No. of model fits in ransac")]
            public int partialParabolaMaxIterations = PartialParabolaMaxIterations;
            [Tooltip("If velocity at gravitational axis is larger than this value, expect gravity to apply")]
            public float partialParabolaMaxVGravity = PartialParabolaMaxVGravity;
            [Tooltip("at which index to apply the gravity, (x=0, y=1 or z=2)")]
            public int partialParabolaGravityAxisIndex = PartialParabolaGravityAxisIndex;
            [Tooltip("gravity constant. [meters / seconds**2]")]
            public float partialParabolaGravity = PartialParabolaGravity;
            [Tooltip("stopProb and inlierRatio are used to calculate the optimal max iterations * in ransac with the formula log(1 - stopProb)/log(1 - inlierRatio ^ numpoints)")]
            public float partialParabolaStopProbability = PartialParabolaStopProbability;
            [Tooltip("stopProb and inlierRatio are used to calculate the optimal max iterations * in ransac with the formula log(1 - stopProb)/log(1 - inlierRatio ^ numpoints)")]
            public float partialParabolaInliersRatio = PartialParabolaInliersRatio;
        }

        public PartialParabolaFitConfigParameters PartialParabolaFitConfig;

        [Serializable]
        public class PartialParabolaHistoryGroupConfigParameters {

            public static int PartialParabolaHistorySize = 100;

            [Tooltip("Maximum number of partial parabolas in each history event")]
            public int partialParabolaHistorySize = PartialParabolaHistorySize;
        }

        public PartialParabolaHistoryGroupConfigParameters PartialParabolaHistoryGroupConfig;

        [Serializable]
        public class ProcessingParameters {

            public static int MaximumInboundQueueSize = 2;

            [Tooltip("Set maximum allowed inbound events to put into processing queue")]
            public int maximumInboundQueueSize = MaximumInboundQueueSize;
        }

        public ProcessingParameters Processing;

        [Serializable]
        public class Track_selectionParameters {

            public static int MOTTrackMinLengthParameter = 5;
            public static float MOTDontSelectTracksOlder = 0.5f;
            public static float MOTTrackMedianConfidenceThresholdParameter = 0.5f;

            [Tooltip("An object track with less than this minimum amount of detections cannot be detected as active.")]
            public int mOTTrackMinLengthParameter = MOTTrackMinLengthParameter;
            [Tooltip("An object track being inactive for longer than this period cannot be detected as active.")]
            public float mOTDontSelectTracksOlder = MOTDontSelectTracksOlder;
            [Tooltip("An object track with a median confidence of all contained detections lower than this value cannot be detected as active.")]
            public float mOTTrackMedianConfidenceThresholdParameter = MOTTrackMedianConfidenceThresholdParameter;
        }

        public Track_selectionParameters Track_selection;

        [Serializable]
        public class TrackingParameters {

            public static float MOTDetectionMaxLiveTimeParameter = 2.0f;
            public static MOTAssignmentMethodParameterType MOTAssignmentMethodParameter = MOTAssignmentMethodParameterType.Greedy;
            public static int MOTMatchingThresholdParameter = 50;

            [Tooltip("Remove object tracks being inactive for longer than this period.")]
            public float mOTDetectionMaxLiveTimeParameter = MOTDetectionMaxLiveTimeParameter;
            [Tooltip("Method to assign detections to object tracks. Hungarian: complete match with minimal error. Greedy: successive best match")]
            public MOTAssignmentMethodParameterType mOTAssignmentMethodParameter = MOTAssignmentMethodParameter;
            [Tooltip("To assign detections to already existing tracks the score between the detection and the prediction of the track must not exceed this threshold. Increase this value if you have faster moving objects or low frame rates. Lower this value if you have many slower moving objects or high frames rates. When the score is above the threshold then a new track is created from this detection.")]
            public int mOTMatchingThresholdParameter = MOTMatchingThresholdParameter;
        }

        public TrackingParameters Tracking;

        [Serializable]
        public class TrajectoryFitterConfigParameters {

            public static int TrajectoryFitterConfigMinPoints = 3;
            public static int TrajectoryFitterConfigMaxPoints = 256;
            public static float TrajectoryFitterConfigMinSpeed = 0.01f;

            [Tooltip("minimal number of points to fit a refined parabola")]
            public int trajectoryFitterConfigMinPoints = TrajectoryFitterConfigMinPoints;
            [Tooltip("maximal number of points to fit a parabola")]
            public int trajectoryFitterConfigMaxPoints = TrajectoryFitterConfigMaxPoints;
            [Tooltip("a trajectory will exposed only if the speed is larger than this value")]
            public float trajectoryFitterConfigMinSpeed = TrajectoryFitterConfigMinSpeed;
        }

        public TrajectoryFitterConfigParameters TrajectoryFitterConfig;

        public override Dictionary<string, object> Parameters {
            get {
                var parameters = new Dictionary<string, object>();

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.BallDetectorConfidenceThreshold",
                    Detection.ballDetectorConfidenceThreshold, DetectionParameters.BallDetectorConfidenceThreshold, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.DiscardBelowGroundTolerance",
                    Detection.discardBelowGroundTolerance, DetectionParameters.DiscardBelowGroundTolerance, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.BallModel",
                    BallModelTypeLookup[Detection.ballModel], BallModelTypeLookup[DetectionParameters.BallModel], parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationTypeParameter",
                    LocalizationTypeParameterTypeLookup[MultiBallTrackerConfig.localizationTypeParameter], LocalizationTypeParameterTypeLookup[MultiBallTrackerConfigParameters.LocalizationTypeParameter], parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationOnGroundInfinitePlane",
                    MultiBallTrackerConfig.localizationOnGroundInfinitePlane, MultiBallTrackerConfigParameters.LocalizationOnGroundInfinitePlane, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationOnPlanePreferredYLocation",
                    MultiBallTrackerConfig.localizationOnPlanePreferredYLocation, MultiBallTrackerConfigParameters.LocalizationOnPlanePreferredYLocation, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationOnGroundMaxYDeviation",
                    MultiBallTrackerConfig.localizationOnGroundMaxYDeviation, MultiBallTrackerConfigParameters.LocalizationOnGroundMaxYDeviation, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.BallDiameter",
                    MultiBallTrackerConfig.ballDiameter, MultiBallTrackerConfigParameters.BallDiameter, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTDetectionMaxLiveTimeParameter",
                    Tracking.mOTDetectionMaxLiveTimeParameter, TrackingParameters.MOTDetectionMaxLiveTimeParameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTAssignmentMethodParameter",
                    MOTAssignmentMethodParameterTypeLookup[Tracking.mOTAssignmentMethodParameter], MOTAssignmentMethodParameterTypeLookup[TrackingParameters.MOTAssignmentMethodParameter], parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTMatchingThresholdParameter",
                    Tracking.mOTMatchingThresholdParameter, TrackingParameters.MOTMatchingThresholdParameter, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTTrackMinLengthParameter",
                    Track_selection.mOTTrackMinLengthParameter, Track_selectionParameters.MOTTrackMinLengthParameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTDontSelectTracksOlder",
                    Track_selection.mOTDontSelectTracksOlder, Track_selectionParameters.MOTDontSelectTracksOlder, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTTrackMedianConfidenceThresholdParameter",
                    Track_selection.mOTTrackMedianConfidenceThresholdParameter, Track_selectionParameters.MOTTrackMedianConfidenceThresholdParameter, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MaximumInboundQueueSize",
                    Processing.maximumInboundQueueSize, ProcessingParameters.MaximumInboundQueueSize, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.PublishTrajectoryEvent",
                    Events.publishTrajectoryEvent, EventsParameters.PublishTrajectoryEvent, parameters
                );

                AddUnlessDefault("com.coachai.engine.camera.components.TargetFPS",
                    ARPublisherConfig.targetFPS, ARPublisherConfigParameters.TargetFPS, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.components.BallPresenceEnableSizeErrorDetection",
                    BallPresenceConfig.ballPresenceEnableSizeErrorDetection, BallPresenceConfigParameters.BallPresenceEnableSizeErrorDetection, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.components.BallPresenceExpectedBallDiameter",
                    BallPresenceConfig.ballPresenceExpectedBallDiameter, BallPresenceConfigParameters.BallPresenceExpectedBallDiameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.components.BallPresenceMaxChangeFrequency",
                    BallPresenceConfig.ballPresenceMaxChangeFrequency, BallPresenceConfigParameters.BallPresenceMaxChangeFrequency, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.components.PartialParabolaHistorySize",
                    PartialParabolaHistoryGroupConfig.partialParabolaHistorySize, PartialParabolaHistoryGroupConfigParameters.PartialParabolaHistorySize, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaFitWindowSize",
                    PartialParabolaFitConfig.partialParabolaFitWindowSize, PartialParabolaFitConfigParameters.PartialParabolaFitWindowSize, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaMaxVelocity",
                    PartialParabolaFitConfig.partialParabolaMaxVelocity, PartialParabolaFitConfigParameters.PartialParabolaMaxVelocity, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaMinInliersRatio",
                    PartialParabolaFitConfig.partialParabolaMinInliersRatio, PartialParabolaFitConfigParameters.PartialParabolaMinInliersRatio, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaScoreThreshold",
                    PartialParabolaFitConfig.partialParabolaScoreThreshold, PartialParabolaFitConfigParameters.PartialParabolaScoreThreshold, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaMaxIterations",
                    PartialParabolaFitConfig.partialParabolaMaxIterations, PartialParabolaFitConfigParameters.PartialParabolaMaxIterations, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaMaxVGravity",
                    PartialParabolaFitConfig.partialParabolaMaxVGravity, PartialParabolaFitConfigParameters.PartialParabolaMaxVGravity, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaGravityAxisIndex",
                    PartialParabolaFitConfig.partialParabolaGravityAxisIndex, PartialParabolaFitConfigParameters.PartialParabolaGravityAxisIndex, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaGravity",
                    PartialParabolaFitConfig.partialParabolaGravity, PartialParabolaFitConfigParameters.PartialParabolaGravity, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaStopProbability",
                    PartialParabolaFitConfig.partialParabolaStopProbability, PartialParabolaFitConfigParameters.PartialParabolaStopProbability, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaInliersRatio",
                    PartialParabolaFitConfig.partialParabolaInliersRatio, PartialParabolaFitConfigParameters.PartialParabolaInliersRatio, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaOutlierDetectorWindowSize",
                    ParabolaOutlierDetectorConfig.parabolaOutlierDetectorWindowSize, ParabolaOutlierDetectorConfigParameters.ParabolaOutlierDetectorWindowSize, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaOutlierDetectorMinClusterSize",
                    ParabolaOutlierDetectorConfig.parabolaOutlierDetectorMinClusterSize, ParabolaOutlierDetectorConfigParameters.ParabolaOutlierDetectorMinClusterSize, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaOutlierDetectorMaxDeltaV",
                    ParabolaOutlierDetectorConfig.parabolaOutlierDetectorMaxDeltaV, ParabolaOutlierDetectorConfigParameters.ParabolaOutlierDetectorMaxDeltaV, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaOutlierDetectorMaxTError",
                    ParabolaOutlierDetectorConfig.parabolaOutlierDetectorMaxTError, ParabolaOutlierDetectorConfigParameters.ParabolaOutlierDetectorMaxTError, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaOutlierDetectorMaxXError",
                    ParabolaOutlierDetectorConfig.parabolaOutlierDetectorMaxXError, ParabolaOutlierDetectorConfigParameters.ParabolaOutlierDetectorMaxXError, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaOutlierDetectorActive",
                    ParabolaOutlierDetectorConfig.parabolaOutlierDetectorActive, ParabolaOutlierDetectorConfigParameters.ParabolaOutlierDetectorActive, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.IntersectionDetectorConfigMinDeltaV",
                    IntersectionDetectorConfig.intersectionDetectorConfigMinDeltaV, IntersectionDetectorConfigParameters.IntersectionDetectorConfigMinDeltaV, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.IntersectionDetectorConfigMaxDeltaV",
                    IntersectionDetectorConfig.intersectionDetectorConfigMaxDeltaV, IntersectionDetectorConfigParameters.IntersectionDetectorConfigMaxDeltaV, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.IntersectionDetectorConfigMaxTError",
                    IntersectionDetectorConfig.intersectionDetectorConfigMaxTError, IntersectionDetectorConfigParameters.IntersectionDetectorConfigMaxTError, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.IntersectionDetectorConfigMaxXError",
                    IntersectionDetectorConfig.intersectionDetectorConfigMaxXError, IntersectionDetectorConfigParameters.IntersectionDetectorConfigMaxXError, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.IntersectionDetectorConfigRelVFactor",
                    IntersectionDetectorConfig.intersectionDetectorConfigRelVFactor, IntersectionDetectorConfigParameters.IntersectionDetectorConfigRelVFactor, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.TrajectoryFitterConfigMinPoints",
                    TrajectoryFitterConfig.trajectoryFitterConfigMinPoints, TrajectoryFitterConfigParameters.TrajectoryFitterConfigMinPoints, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.TrajectoryFitterConfigMaxPoints",
                    TrajectoryFitterConfig.trajectoryFitterConfigMaxPoints, TrajectoryFitterConfigParameters.TrajectoryFitterConfigMaxPoints, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.TrajectoryFitterConfigMinSpeed",
                    TrajectoryFitterConfig.trajectoryFitterConfigMinSpeed, TrajectoryFitterConfigParameters.TrajectoryFitterConfigMinSpeed, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaBasicConfigBouncingWeightsDimsNorm",
                    ParabolaBasicConfig.parabolaBasicConfigBouncingWeightsDimsNorm, ParabolaBasicConfigParameters.ParabolaBasicConfigBouncingWeightsDimsNorm, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaBasicConfigTimeDiffToMergeIntersections",
                    ParabolaBasicConfig.parabolaBasicConfigTimeDiffToMergeIntersections, ParabolaBasicConfigParameters.ParabolaBasicConfigTimeDiffToMergeIntersections, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaBasicConfigMinDeltaVNorm",
                    ParabolaBasicConfig.parabolaBasicConfigMinDeltaVNorm, ParabolaBasicConfigParameters.ParabolaBasicConfigMinDeltaVNorm, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaBasicConfigMinVNormAmplitudeBounce",
                    ParabolaBasicConfig.parabolaBasicConfigMinVNormAmplitudeBounce, ParabolaBasicConfigParameters.ParabolaBasicConfigMinVNormAmplitudeBounce, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaBasicConfigMaxVNormAmplitudeBounce",
                    ParabolaBasicConfig.parabolaBasicConfigMaxVNormAmplitudeBounce, ParabolaBasicConfigParameters.ParabolaBasicConfigMaxVNormAmplitudeBounce, parameters
                );

                return parameters;
            }
        }

        private void AddUnlessDefault<T>(string key, T value, T @default, Dictionary<string, object> parameters) {
            if (value.Equals(@default)) return;
            parameters.Add(key, value);
        }

        public override List<string> GetAvailableEvents() => AvailableEventsLookup.Values.ToList();

        public enum AvailableEvents {
            BallPresence
        }

        public Dictionary<AvailableEvents, string> AvailableEventsLookup = new Dictionary<AvailableEvents, string> {
            { AvailableEvents.BallPresence, "com.coachai.engine.analytics.ball.BallPresence" }
        };

        public enum AvailableFeedback {
            BallPresenceFeedback
        }

        public Dictionary<AvailableFeedback, string> AvailableFeedbackLookup = new Dictionary<AvailableFeedback, string> {
            { AvailableFeedback.BallPresenceFeedback, "com.coachai.engine.analytics.ball.BallPresenceFeedback" }
        };

        public enum AvailableMetrics {

        }

        public Dictionary<AvailableMetrics, string> AvailableMetricsLookup = new Dictionary<AvailableMetrics, string> {

        };

        public enum BallModelType {
            BallBox1fLongRangeMaxV4,
            BallBox1fMidRangeMediumV10,
            BallBox1fMidRangeMediumV9,
            BallBox1fMidRangeMediumV6,
            BallBox1fShortRangeLightV6,
            BallBox1fShortRangeLightV2,
            BallBoxOffset2fShortRangeLightV6,
            BallBoxOffset2fShortRangeLightV4,
            BallBoxOffset2fMidRangeMediumV8,
            BallBoxOffset2fMidRangeMediumV7
        }

        public Dictionary<BallModelType, string> BallModelTypeLookup = new Dictionary<BallModelType, string> {
            { BallModelType.BallBox1fLongRangeMaxV4, "ball.box.1f.long-range.max v4" },
            { BallModelType.BallBox1fMidRangeMediumV10, "ball.box.1f.mid-range.medium v10" },
            { BallModelType.BallBox1fMidRangeMediumV9, "ball.box.1f.mid-range.medium v9" },
            { BallModelType.BallBox1fMidRangeMediumV6, "ball.box.1f.mid-range.medium v6 (Deprecated)" },
            { BallModelType.BallBox1fShortRangeLightV6, "ball.box.1f.short-range.light v6" },
            { BallModelType.BallBox1fShortRangeLightV2, "ball.box.1f.short-range.light v2 (Deprecated)" },
            { BallModelType.BallBoxOffset2fShortRangeLightV6, "ball.box-offset.2f.short-range.light v6" },
            { BallModelType.BallBoxOffset2fShortRangeLightV4, "ball.box-offset.2f.short-range.light v4 (Deprecated)" },
            { BallModelType.BallBoxOffset2fMidRangeMediumV8, "ball.box-offset.2f.mid-range.medium v8" },
            { BallModelType.BallBoxOffset2fMidRangeMediumV7, "ball.box-offset.2f.mid-range.medium v7 (Deprecated)" }
        };

        public enum LocalizationTypeParameterType {
            SIZE_ONLY,
            ON_GROUND_PLANE_ONLY,
            ON_GROUND_PLANE_HYBRID
        }

        public Dictionary<LocalizationTypeParameterType, string> LocalizationTypeParameterTypeLookup = new Dictionary<LocalizationTypeParameterType, string> {
            { LocalizationTypeParameterType.SIZE_ONLY, "SIZE_ONLY" },
            { LocalizationTypeParameterType.ON_GROUND_PLANE_ONLY, "ON_GROUND_PLANE_ONLY" },
            { LocalizationTypeParameterType.ON_GROUND_PLANE_HYBRID, "ON_GROUND_PLANE_HYBRID" }
        };

        public enum MOTAssignmentMethodParameterType {
            Hungarian,
            Greedy
        }

        public Dictionary<MOTAssignmentMethodParameterType, string> MOTAssignmentMethodParameterTypeLookup = new Dictionary<MOTAssignmentMethodParameterType, string> {
            { MOTAssignmentMethodParameterType.Hungarian, "Hungarian" },
            { MOTAssignmentMethodParameterType.Greedy, "Greedy" }
        };

    }
}   