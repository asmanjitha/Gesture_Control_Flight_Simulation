/*
 * Copyright (c) 2021 AGT Group (R&D) GmbH. All rights reserved.
 * Redistribution and use in source and binary form without the express
 * permission of the above copyright holder is not permitted.
 */

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// CoachAI Core Version: 13.2.3
// Generated On: 2022-06-13T13:29:09Z
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CoachAiEngine;
using System.Linq;
using UnityEngine;
using UnityEngine.Events;

namespace CoachAiEngine.Activities {

    [System.CodeDom.Compiler.GeneratedCode(tool: "Coach-Ai engine", version: "13.2.3")]
    [CreateAssetMenu(fileName = nameof(Pose3DARSpec), menuName = "Coach-AI Engine/Activities/Human Body/Pose3DARSpec")]
    public class Pose3DARSpec : CoachActivity {

        public override string ActivityId => "com.coachai.activities.humanbody.pose3d.Pose3DARSpec";

        [Serializable]
        public class ActivityParameters {

            public static int TargetFPS = 30;

            [Tooltip("Set maximum allowed processed camera frames per second")]
            public int targetFPS = TargetFPS;
        }

        public ActivityParameters Activity;

        [Serializable]
        public class PerformanceParameters {

            public static int TargetFPS = 30;
            public static int MaximumPipelineThreads = 2;
            public static int MaximumInboundQueueSize = 2;

            [Tooltip("Set maximum allowed processed frames per second")]
            public int targetFPS = TargetFPS;
            [Tooltip("Defines how many threads are used to concurrently process inbound events.")]
            public int maximumPipelineThreads = MaximumPipelineThreads;
            [Tooltip("Set maximum allowed inbound events to put into processing queue")]
            public int maximumInboundQueueSize = MaximumInboundQueueSize;
        }

        public PerformanceParameters Performance;

        [Serializable]
        public class Pose3DConfigParameters {

            public static bool LocalizePose3dOnARPlane = true;
            public static float KnownPersonSize = 1.8f;
            public static Pose3dModelParamType Pose3dModelParam = Pose3dModelParamType.Pose3dSingle13clu13clu1fsGeneralV7;

            [Tooltip("Use AR planes to determine the person location on the ground and its real size. If disabled, the Pose3DResult will not contain poses in world coordinates.")]
            public bool localizePose3dOnARPlane = LocalizePose3dOnARPlane;
            [Tooltip("If you know the size of the recorded person, enter his/her height (in meters). Knowing the size of a person allows to estimate the real position relative to the camera. No AR planes are needed in this case.")]
            public float knownPersonSize = KnownPersonSize;
            [Tooltip("Select a Pose3D model. Please read Pose3D documentation to be aware of the available models, use cases and limitations.")]
            public Pose3dModelParamType pose3dModelParam = Pose3dModelParam;
        }

        public Pose3DConfigParameters Pose3DConfig;

        [Serializable]
        public class PoseTrackerConfigParameters {

            public static PoseModelForFullFrameType PoseModelForFullFrame = PoseModelForFullFrameType.PoseMulti17lu1fGeneralLightV7;
            public static bool UsePoseSmoothing = false;
            public static float PoseSmoothingFactor = 0.1f;
            public static float PoseSmoothingMaxDisplacement = 20.0f;
            public static bool EnablePose2DLocalizationOnGroundWithAR = false;
            public static bool EnablePersonSegmentation = false;
            public static SortPoseByType SortPoseBy = SortPoseByType.AREA;

            [Tooltip("Choose a pose model to use for full frame detection, or initialization if adaptive region of interest is enabled.")]
            public PoseModelForFullFrameType poseModelForFullFrame = PoseModelForFullFrame;
            [Tooltip("All detected poses will be smoothed over time as long as movements are not too quick.")]
            public bool usePoseSmoothing = UsePoseSmoothing;
            [Tooltip("A value of 1.0 means that the previous pose is not used for smoothing.")]
            public float poseSmoothingFactor = PoseSmoothingFactor;
            [Tooltip("No smoothing is applied if the current pose exceeds this threshold of movement (pixels). This will be reworked in a future release, to be based on person size not on pixels!")]
            public float poseSmoothingMaxDisplacement = PoseSmoothingMaxDisplacement;
            [Tooltip("Use AR planes to determine the location of Pose2D on the ground.")]
            public bool enablePose2DLocalizationOnGroundWithAR = EnablePose2DLocalizationOnGroundWithAR;
            [Tooltip("Enable person segmentation output, if the model supports it.")]
            public bool enablePersonSegmentation = EnablePersonSegmentation;
            [Tooltip("Sort the poses on the basis of proximity, pose confidence or bounding box area")]
            public SortPoseByType sortPoseBy = SortPoseBy;
        }

        public PoseTrackerConfigParameters PoseTrackerConfig;

        [Serializable]
        public class Region_of_InterestParameters {

            public static bool UsePersonDetectorForAdaptiveRegionOfInterest = true;
            public static bool UseAdaptiveRegionOfInterest = true;
            public static PoseModelRoiType PoseModelRoi = PoseModelRoiType.PoseMulti17lu1fGeneralMediumV4;

            [Tooltip("Use the [PersonDetectorResult] to (re-)initialize the region of interest in case the pose was lost. Enable this option if you expect the Pose to be far away from the phone and leaving and re-entering the camera view. If disabled, Pose2dResults are used to (re-)initialize the region of interest. Make sure to run the [PersonDetector] Analytics in addition to the [PoseTrackerAnalytics] to receive [PersonDetectorResult]s")]
            public bool usePersonDetectorForAdaptiveRegionOfInterest = UsePersonDetectorForAdaptiveRegionOfInterest;
            [Tooltip("Use an adaptive region of interest to improve pose estimation, specifically of persons further away. As soon as a pose is found, pose estimation is applied only on a sub-region in the image where the person is predicted to be. This yields better accuracy and precision of pose estimation and enables much higher distances from the camera. Current limitations: * currently only single pose * If multiple persons are in view might track the wrong person. Also see parameter [SortPoseBy]")]
            public bool useAdaptiveRegionOfInterest = UseAdaptiveRegionOfInterest;
            [Tooltip("Choose a pose model to be used within an adaptive region of interest.")]
            public PoseModelRoiType poseModelRoi = PoseModelRoi;
        }

        public Region_of_InterestParameters Region_of_Interest;

        public override Dictionary<string, object> Parameters {
            get {
                var parameters = new Dictionary<string, object>();

                AddUnlessDefault("com.coachai.engine.analytics.pose.components.PoseModelForFullFrame",
                    PoseModelForFullFrameTypeLookup[PoseTrackerConfig.poseModelForFullFrame], PoseModelForFullFrameTypeLookup[PoseTrackerConfigParameters.PoseModelForFullFrame], parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.UsePoseSmoothing",
                    PoseTrackerConfig.usePoseSmoothing, PoseTrackerConfigParameters.UsePoseSmoothing, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.PoseSmoothingFactor",
                    PoseTrackerConfig.poseSmoothingFactor, PoseTrackerConfigParameters.PoseSmoothingFactor, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.PoseSmoothingMaxDisplacement",
                    PoseTrackerConfig.poseSmoothingMaxDisplacement, PoseTrackerConfigParameters.PoseSmoothingMaxDisplacement, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.EnablePose2DLocalizationOnGroundWithAR",
                    PoseTrackerConfig.enablePose2DLocalizationOnGroundWithAR, PoseTrackerConfigParameters.EnablePose2DLocalizationOnGroundWithAR, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.EnablePersonSegmentation",
                    PoseTrackerConfig.enablePersonSegmentation, PoseTrackerConfigParameters.EnablePersonSegmentation, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.SortPoseBy",
                    SortPoseByTypeLookup[PoseTrackerConfig.sortPoseBy], SortPoseByTypeLookup[PoseTrackerConfigParameters.SortPoseBy], parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.pose.components.UsePersonDetectorForAdaptiveRegionOfInterest",
                    Region_of_Interest.usePersonDetectorForAdaptiveRegionOfInterest, Region_of_InterestParameters.UsePersonDetectorForAdaptiveRegionOfInterest, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.UseAdaptiveRegionOfInterest",
                    Region_of_Interest.useAdaptiveRegionOfInterest, Region_of_InterestParameters.UseAdaptiveRegionOfInterest, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.PoseModelRoi",
                    PoseModelRoiTypeLookup[Region_of_Interest.poseModelRoi], PoseModelRoiTypeLookup[Region_of_InterestParameters.PoseModelRoi], parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.pose.parameters.TargetFPS",
                    Performance.targetFPS, PerformanceParameters.TargetFPS, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.parameters.MaximumPipelineThreads",
                    Performance.maximumPipelineThreads, PerformanceParameters.MaximumPipelineThreads, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.parameters.MaximumInboundQueueSize",
                    Performance.maximumInboundQueueSize, PerformanceParameters.MaximumInboundQueueSize, parameters
                );

                AddUnlessDefault("com.coachai.engine.analytics.pose3d.components.LocalizePose3dOnARPlane",
                    Pose3DConfig.localizePose3dOnARPlane, Pose3DConfigParameters.LocalizePose3dOnARPlane, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose3d.components.KnownPersonSize",
                    Pose3DConfig.knownPersonSize, Pose3DConfigParameters.KnownPersonSize, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose3d.components.Pose3dModelParam",
                    Pose3dModelParamTypeLookup[Pose3DConfig.pose3dModelParam], Pose3dModelParamTypeLookup[Pose3DConfigParameters.Pose3dModelParam], parameters
                );

                AddUnlessDefault("com.coachai.engine.camera.components.TargetFPS",
                    Activity.targetFPS, ActivityParameters.TargetFPS, parameters
                );

                return parameters;
            }
        }

        private void AddUnlessDefault<T>(string key, T value, T @default, Dictionary<string, object> parameters) {
            if (value.Equals(@default)) return;
            parameters.Add(key, value);
        }

        public override List<string> GetAvailableEvents() => AvailableEventsLookup.Values.ToList();

        public enum AvailableEvents {
            Pose2dResult,
            Pose3dResult,
            MissingArPlanesIssue,
            PoseOutsidePlanesIssue
        }

        public Dictionary<AvailableEvents, string> AvailableEventsLookup = new Dictionary<AvailableEvents, string> {
            { AvailableEvents.Pose2dResult, "com.coachai.engine.analytics.pose.Pose2dResult" },
            { AvailableEvents.Pose3dResult, "com.coachai.engine.analytics.pose3d.Pose3dResult" },
            { AvailableEvents.MissingArPlanesIssue, "com.coachai.engine.analytics.pose.MissingArPlanesIssue" },
            { AvailableEvents.PoseOutsidePlanesIssue, "com.coachai.engine.analytics.pose.PoseOutsidePlanesIssue" }
        };

        public enum AvailableFeedback {

        }

        public Dictionary<AvailableFeedback, string> AvailableFeedbackLookup = new Dictionary<AvailableFeedback, string> {

        };

        public enum AvailableMetrics {
            DetectedPoseCount
        }

        public Dictionary<AvailableMetrics, string> AvailableMetricsLookup = new Dictionary<AvailableMetrics, string> {
            { AvailableMetrics.DetectedPoseCount, "com.coachai.activities.humanbody.pose3d.DetectedPoseCount" }
        };

        public enum Pose3dModelParamType {
            Pose3dSingle13clu13clu1fsGeneralV7,
            Pose3dSingle13clu13clu1fsGeneralV3,
            Pose3dSingle13clu13clu1fGeneralV4,
            Pose3dSingle17lu17lu1fsGeneralV1,
            Pose3dSingle25fhlu25fhlu1fsFitnessV2
        }

        public Dictionary<Pose3dModelParamType, string> Pose3dModelParamTypeLookup = new Dictionary<Pose3dModelParamType, string> {
            { Pose3dModelParamType.Pose3dSingle13clu13clu1fsGeneralV7, "pose3d.single-13clu.13clu-1fs.general v7" },
            { Pose3dModelParamType.Pose3dSingle13clu13clu1fsGeneralV3, "pose3d.single-13clu.13clu-1fs.general v3 (Experimental)" },
            { Pose3dModelParamType.Pose3dSingle13clu13clu1fGeneralV4, "pose3d.single-13clu.13clu-1f.general v4" },
            { Pose3dModelParamType.Pose3dSingle17lu17lu1fsGeneralV1, "pose3d.single-17lu.17lu-1fs.general v1" },
            { Pose3dModelParamType.Pose3dSingle25fhlu25fhlu1fsFitnessV2, "pose3d.single-25fhlu.25fhlu-1fs.fitness v2 (Experimental)" }
        };

        public enum PoseModelForFullFrameType {
            PoseMulti17lu1fGeneralLightV7,
            PoseMulti17lu1fGeneralLightV2,
            PoseMulti17lu1fGeneralMediumV4,
            PoseMulti17lu1fDancingLightV12,
            PoseMulti17lu1fDancingLightV4,
            PoseMulti21flu1fDancingLightV1,
            PoseMulti25fhlu1fDancingLightV4,
            PoseSegMulti17lu1fDancingLightV1,
            PoseSegMulti25fhlu1fDancingLightV1,
            PoseSegMulti17lu1fGeneralLightV6,
            PoseSingle17lu1fFitnessMediumV2,
            PoseSingle17lu1fFitnessLightV2
        }

        public Dictionary<PoseModelForFullFrameType, string> PoseModelForFullFrameTypeLookup = new Dictionary<PoseModelForFullFrameType, string> {
            { PoseModelForFullFrameType.PoseMulti17lu1fGeneralLightV7, "pose.multi-17lu.1f.general.light v7" },
            { PoseModelForFullFrameType.PoseMulti17lu1fGeneralLightV2, "pose.multi-17lu.1f.general.light v2 (Deprecated)" },
            { PoseModelForFullFrameType.PoseMulti17lu1fGeneralMediumV4, "pose.multi-17lu.1f.general.medium v4" },
            { PoseModelForFullFrameType.PoseMulti17lu1fDancingLightV12, "pose.multi-17lu.1f.dancing.light v12" },
            { PoseModelForFullFrameType.PoseMulti17lu1fDancingLightV4, "pose.multi-17lu.1f.dancing.light v4" },
            { PoseModelForFullFrameType.PoseMulti21flu1fDancingLightV1, "pose.multi-21flu.1f.dancing.light v1" },
            { PoseModelForFullFrameType.PoseMulti25fhlu1fDancingLightV4, "pose.multi-25fhlu.1f.dancing.light v4" },
            { PoseModelForFullFrameType.PoseSegMulti17lu1fDancingLightV1, "pose.seg-multi-17lu.1f.dancing.light v1" },
            { PoseModelForFullFrameType.PoseSegMulti25fhlu1fDancingLightV1, "pose.seg-multi-25fhlu.1f.dancing.light v1" },
            { PoseModelForFullFrameType.PoseSegMulti17lu1fGeneralLightV6, "pose.seg-multi-17lu.1f.general.light v6" },
            { PoseModelForFullFrameType.PoseSingle17lu1fFitnessMediumV2, "pose.single-17lu.1f.fitness.medium v2" },
            { PoseModelForFullFrameType.PoseSingle17lu1fFitnessLightV2, "pose.single-17lu.1f.fitness.light v2" }
        };

        public enum SortPoseByType {
            ROI_CENTER_PROXIMITY,
            SCORE,
            AREA,
            EXTENDED_AREA
        }

        public Dictionary<SortPoseByType, string> SortPoseByTypeLookup = new Dictionary<SortPoseByType, string> {
            { SortPoseByType.ROI_CENTER_PROXIMITY, "ROI_CENTER_PROXIMITY" },
            { SortPoseByType.SCORE, "SCORE" },
            { SortPoseByType.AREA, "AREA" },
            { SortPoseByType.EXTENDED_AREA, "EXTENDED_AREA" }
        };

        public enum PoseModelRoiType {
            PoseMulti17lu1fGeneralLightV7,
            PoseMulti17lu1fGeneralLightV2,
            PoseMulti17lu1fGeneralMediumV4,
            PoseMulti17lu1fDancingLightV12,
            PoseMulti17lu1fDancingLightV4,
            PoseMulti21flu1fDancingLightV1,
            PoseMulti25fhlu1fDancingLightV4,
            PoseSegMulti17lu1fDancingLightV1,
            PoseSegMulti25fhlu1fDancingLightV1,
            PoseSegMulti17lu1fGeneralLightV6,
            PoseSingle17lu1fFitnessMediumV2,
            PoseSingle17lu1fFitnessLightV2
        }

        public Dictionary<PoseModelRoiType, string> PoseModelRoiTypeLookup = new Dictionary<PoseModelRoiType, string> {
            { PoseModelRoiType.PoseMulti17lu1fGeneralLightV7, "pose.multi-17lu.1f.general.light v7" },
            { PoseModelRoiType.PoseMulti17lu1fGeneralLightV2, "pose.multi-17lu.1f.general.light v2 (Deprecated)" },
            { PoseModelRoiType.PoseMulti17lu1fGeneralMediumV4, "pose.multi-17lu.1f.general.medium v4" },
            { PoseModelRoiType.PoseMulti17lu1fDancingLightV12, "pose.multi-17lu.1f.dancing.light v12" },
            { PoseModelRoiType.PoseMulti17lu1fDancingLightV4, "pose.multi-17lu.1f.dancing.light v4" },
            { PoseModelRoiType.PoseMulti21flu1fDancingLightV1, "pose.multi-21flu.1f.dancing.light v1" },
            { PoseModelRoiType.PoseMulti25fhlu1fDancingLightV4, "pose.multi-25fhlu.1f.dancing.light v4" },
            { PoseModelRoiType.PoseSegMulti17lu1fDancingLightV1, "pose.seg-multi-17lu.1f.dancing.light v1" },
            { PoseModelRoiType.PoseSegMulti25fhlu1fDancingLightV1, "pose.seg-multi-25fhlu.1f.dancing.light v1" },
            { PoseModelRoiType.PoseSegMulti17lu1fGeneralLightV6, "pose.seg-multi-17lu.1f.general.light v6" },
            { PoseModelRoiType.PoseSingle17lu1fFitnessMediumV2, "pose.single-17lu.1f.fitness.medium v2" },
            { PoseModelRoiType.PoseSingle17lu1fFitnessLightV2, "pose.single-17lu.1f.fitness.light v2" }
        };

    }
}   