/*
 * Copyright (c) 2021 AGT Group (R&D) GmbH. All rights reserved.
 * Redistribution and use in source and binary form without the express
 * permission of the above copyright holder is not permitted.
 */

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// CoachAI Core Version: 13.2.3
// Generated On: 2022-06-13T13:29:09Z
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CoachAiEngine;
using System.Linq;
using UnityEngine;
using UnityEngine.Events;

namespace CoachAiEngine.Analytics {

    [System.CodeDom.Compiler.GeneratedCode(tool: "Coach-Ai engine", version: "13.2.3")]
    [CreateAssetMenu(fileName = nameof(RecordingComponent), menuName = "Coach-AI Engine/Components/Generic/RecordingComponent (Experimental)")]
    public class RecordingComponent : CoachComponent {

        public override string ComponentId => "com.coachai.engine.recording.components.RecordingComponent";
        private static readonly string[] eventIds =  {

        };

        private static readonly bool EnableEventRecording = true;
        private static readonly bool EnableVideoRecording = true;
        private static readonly string RecordingIdentifier = "parameter.defaultValue.toString()";
        private static readonly string BaseDirectory = "parameter.defaultValue.toString()";
        private static readonly string EventFileName = "parameter.defaultValue.toString()";
        private static readonly string VideoFileName = "parameter.defaultValue.toString()";
        private static readonly string LogFileName = "parameter.defaultValue.toString()";
        private static readonly EventRecordingFileFormatType EventRecordingFileFormat = EventRecordingFileFormatType.JSON;

        [Tooltip("Enables the event recording of components registered by component runtime")]
        public bool enableEventRecording = EnableEventRecording;
        [Tooltip("Enables the video recording of camera frames generated by camera or AR publisher")]
        public bool enableVideoRecording = EnableVideoRecording;
        [Tooltip("String to identify the recording folder")]
        public string recordingIdentifier = RecordingIdentifier;
        [Tooltip("String to identify the base recording directory")]
        public string baseDirectory = BaseDirectory;
        [Tooltip("Component event recording is generated with this name")]
        public string eventFileName = EventFileName;
        [Tooltip("Component video recording is generated with this name")]
        public string videoFileName = VideoFileName;
        [Tooltip("Component logs is generated with this name")]
        public string logFileName = LogFileName;
        [Tooltip("Component logs is generated with this name")]
        public EventRecordingFileFormatType eventRecordingFileFormat = EventRecordingFileFormat;

        public override Dictionary<string, object> Parameters {
            get {
                var parameters = new Dictionary<string, object>();

                AddUnlessDefault("com.coachai.engine.recording.components.EnableEventRecording",
                    enableEventRecording, EnableEventRecording, parameters
                );
                AddUnlessDefault("com.coachai.engine.recording.components.EnableVideoRecording",
                    enableVideoRecording, EnableVideoRecording, parameters
                );
                AddUnlessDefault("com.coachai.engine.recording.components.RecordingIdentifier",
                    recordingIdentifier, RecordingIdentifier, parameters
                );
                AddUnlessDefault("com.coachai.engine.recording.components.BaseDirectory",
                    baseDirectory, BaseDirectory, parameters
                );
                AddUnlessDefault("com.coachai.engine.recording.components.EventFileName",
                    eventFileName, EventFileName, parameters
                );
                AddUnlessDefault("com.coachai.engine.recording.components.VideoFileName",
                    videoFileName, VideoFileName, parameters
                );
                AddUnlessDefault("com.coachai.engine.recording.components.LogFileName",
                    logFileName, LogFileName, parameters
                );
                AddUnlessDefault("com.coachai.engine.recording.components.EventRecordingFileFormat",
                    EventRecordingFileFormatTypeLookup[eventRecordingFileFormat], EventRecordingFileFormatTypeLookup[EventRecordingFileFormat], parameters
                );
                return parameters;
            }
        }

        private void AddUnlessDefault<T>(string key, T value, T @default, Dictionary<string, object> parameters) {
            if (value.Equals(@default)) return;
            parameters.Add(key, value);
        }

        public override List<string> PublishedEventIds => eventIds.ToList();

        public enum EventRecordingFileFormatType {
            CBOR,
            JSON
        }

        public Dictionary<EventRecordingFileFormatType, string> EventRecordingFileFormatTypeLookup = new Dictionary<EventRecordingFileFormatType, string> {
            { EventRecordingFileFormatType.CBOR, "CBOR" },
            { EventRecordingFileFormatType.JSON, "JSON" }
        };

    }
}