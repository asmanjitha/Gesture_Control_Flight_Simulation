/*
 * Copyright (c) 2021 AGT Group (R&D) GmbH. All rights reserved.
 * Redistribution and use in source and binary form without the express
 * permission of the above copyright holder is not permitted.
 */

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// CoachAI Core Version: 13.2.3
// Generated On: 2022-06-13T13:29:09Z
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CoachAiEngine;
using System.Linq;
using UnityEngine;
using UnityEngine.Events;

namespace CoachAiEngine.Analytics {

    [System.CodeDom.Compiler.GeneratedCode(tool: "Coach-Ai engine", version: "13.2.3")]
    [CreateAssetMenu(fileName = nameof(PartialParabolaHistoryGroup), menuName = "Coach-AI Engine/Components/BallSports/PartialParabolaHistoryGroup")]
    public class PartialParabolaHistoryGroup : CoachComponent {

        public override string ComponentId => "com.coachai.engine.analytics.ball.components.PartialParabolaHistoryGroup";
        private static readonly string[] eventIds =  {
            "com.coachai.engine.analytics.ball.parabola.FittedParabolaResult",
            "com.coachai.engine.analytics.ball.pipeline.ParabolaImpact",
            "com.coachai.engine.analytics.ball.pipeline.ParabolaComplete",
            "com.coachai.engine.analytics.ball.pipeline.ParabolaPartial",
            "com.coachai.engine.analytics.ball.pipeline.PartialParabolaHistory"
        };

        private static readonly int PartialParabolaHistorySize = 100;
        private static readonly int PartialParabolaFitWindowSize = 10;
        private static readonly float PartialParabolaMaxVelocity = 42.0f;
        private static readonly float PartialParabolaMinInliersRatio = 0.33f;
        private static readonly float PartialParabolaScoreThreshold = 0.85f;
        private static readonly int PartialParabolaMaxIterations = 100;
        private static readonly float PartialParabolaMaxVGravity = 1.0f;
        private static readonly int PartialParabolaGravityAxisIndex = 1;
        private static readonly float PartialParabolaGravity = 9.807f;
        private static readonly float PartialParabolaStopProbability = 0.99f;
        private static readonly float PartialParabolaInliersRatio = 0.4f;
        private static readonly int ParabolaOutlierDetectorWindowSize = 3;
        private static readonly int ParabolaOutlierDetectorMinClusterSize = 2;
        private static readonly float ParabolaOutlierDetectorMaxDeltaV = 2.0f;
        private static readonly float ParabolaOutlierDetectorMaxTError = 0.1f;
        private static readonly float ParabolaOutlierDetectorMaxXError = 1.0f;
        private static readonly bool ParabolaOutlierDetectorActive = true;
        private static readonly float IntersectionDetectorConfigMinDeltaV = 3.0f;
        private static readonly float IntersectionDetectorConfigMaxDeltaV = 42.0f;
        private static readonly float IntersectionDetectorConfigMaxTError = 0.1f;
        private static readonly float IntersectionDetectorConfigMaxXError = 1.0f;
        private static readonly float IntersectionDetectorConfigRelVFactor = 0.1f;
        private static readonly int TrajectoryFitterConfigMinPoints = 3;
        private static readonly int TrajectoryFitterConfigMaxPoints = 256;
        private static readonly float TrajectoryFitterConfigMinSpeed = 0.01f;
        private static readonly List<float> ParabolaBasicConfigBouncingWeightsDimsNorm = new List<float> { 0.1f, 0.8f, 0.1f };
        private static readonly double ParabolaBasicConfigTimeDiffToMergeIntersections = 0.2;
        private static readonly double ParabolaBasicConfigMinDeltaVNorm = 1.5;
        private static readonly double ParabolaBasicConfigMinVNormAmplitudeBounce = 0.3;
        private static readonly double ParabolaBasicConfigMaxVNormAmplitudeBounce = 0.3;

        [Tooltip("Maximum number of partial parabolas in each history event")]
        public int partialParabolaHistorySize = PartialParabolaHistorySize;
        [Tooltip("sliding window size on data points to fit a parabola on. Currently only values from 8 to 10 are allowed.")]
        public int partialParabolaFitWindowSize = PartialParabolaFitWindowSize;
        [Tooltip("faster trajectories are considered as outliers. 42m/s is the fastest trajectory a human can kick")]
        public float partialParabolaMaxVelocity = PartialParabolaMaxVelocity;
        [Tooltip("Number of inliers required for model acceptance in percentage [0, 1]")]
        public float partialParabolaMinInliersRatio = PartialParabolaMinInliersRatio;
        [Tooltip("Score at which a data point passed into base_model.score_samples is considered as inlier in confidence [0, 1]")]
        public float partialParabolaScoreThreshold = PartialParabolaScoreThreshold;
        [Tooltip("No. of model fits in ransac")]
        public int partialParabolaMaxIterations = PartialParabolaMaxIterations;
        [Tooltip("If velocity at gravitational axis is larger than this value, expect gravity to apply")]
        public float partialParabolaMaxVGravity = PartialParabolaMaxVGravity;
        [Tooltip("at which index to apply the gravity, (x=0, y=1 or z=2)")]
        public int partialParabolaGravityAxisIndex = PartialParabolaGravityAxisIndex;
        [Tooltip("gravity constant. [meters / seconds**2]")]
        public float partialParabolaGravity = PartialParabolaGravity;
        [Tooltip("stopProb and inlierRatio are used to calculate the optimal max iterations * in ransac with the formula log(1 - stopProb)/log(1 - inlierRatio ^ numpoints)")]
        public float partialParabolaStopProbability = PartialParabolaStopProbability;
        [Tooltip("stopProb and inlierRatio are used to calculate the optimal max iterations * in ransac with the formula log(1 - stopProb)/log(1 - inlierRatio ^ numpoints)")]
        public float partialParabolaInliersRatio = PartialParabolaInliersRatio;
        [Tooltip("sliding window size on partial parabolas to filter outliers")]
        public int parabolaOutlierDetectorWindowSize = ParabolaOutlierDetectorWindowSize;
        [Tooltip("minimal size of cluster of parabolas")]
        public int parabolaOutlierDetectorMinClusterSize = ParabolaOutlierDetectorMinClusterSize;
        [Tooltip("maximal allowed difference in velocity to add parabolas to the same cluster")]
        public float parabolaOutlierDetectorMaxDeltaV = ParabolaOutlierDetectorMaxDeltaV;
        [Tooltip("maximal temporal distance between parabolas")]
        public float parabolaOutlierDetectorMaxTError = ParabolaOutlierDetectorMaxTError;
        [Tooltip("maximal location distance between parabolas")]
        public float parabolaOutlierDetectorMaxXError = ParabolaOutlierDetectorMaxXError;
        [Tooltip("indicate if outlier detector should be used or not")]
        public bool parabolaOutlierDetectorActive = ParabolaOutlierDetectorActive;
        [Tooltip("Return trajectory changes for dv above this value")]
        public float intersectionDetectorConfigMinDeltaV = IntersectionDetectorConfigMinDeltaV;
        [Tooltip("RFilter out trajectory change events based on this threshold. 42m/s seems to be the max human capable speed.")]
        public float intersectionDetectorConfigMaxDeltaV = IntersectionDetectorConfigMaxDeltaV;
        [Tooltip("maximal temporal distance between parabolas")]
        public float intersectionDetectorConfigMaxTError = IntersectionDetectorConfigMaxTError;
        [Tooltip("maximal location distance between parabolas")]
        public float intersectionDetectorConfigMaxXError = IntersectionDetectorConfigMaxXError;
        [Tooltip("fraction of the velocity that contributes to the check for change in velocity at intersection in addition to minDeltaV.This is the dynamic part of the check.")]
        public float intersectionDetectorConfigRelVFactor = IntersectionDetectorConfigRelVFactor;
        [Tooltip("minimal number of points to fit a refined parabola")]
        public int trajectoryFitterConfigMinPoints = TrajectoryFitterConfigMinPoints;
        [Tooltip("maximal number of points to fit a parabola")]
        public int trajectoryFitterConfigMaxPoints = TrajectoryFitterConfigMaxPoints;
        [Tooltip("a trajectory will exposed only if the speed is larger than this value")]
        public float trajectoryFitterConfigMinSpeed = TrajectoryFitterConfigMinSpeed;
        [Tooltip("weighting factors for tuning impact detections")]
        public List<float> parabolaBasicConfigBouncingWeightsDimsNorm = ParabolaBasicConfigBouncingWeightsDimsNorm;
        [Tooltip("minimal time difference between two impacts (intersections) to treat them as individual impacts")]
        public double parabolaBasicConfigTimeDiffToMergeIntersections = ParabolaBasicConfigTimeDiffToMergeIntersections;
        [Tooltip("minimal difference of speed before and after an impact")]
        public double parabolaBasicConfigMinDeltaVNorm = ParabolaBasicConfigMinDeltaVNorm;
        [Tooltip("minimal speed before and after an impact")]
        public double parabolaBasicConfigMinVNormAmplitudeBounce = ParabolaBasicConfigMinVNormAmplitudeBounce;
        [Tooltip("speed threshold for kickoff detection")]
        public double parabolaBasicConfigMaxVNormAmplitudeBounce = ParabolaBasicConfigMaxVNormAmplitudeBounce;

        public override Dictionary<string, object> Parameters {
            get {
                var parameters = new Dictionary<string, object>();

                AddUnlessDefault("com.coachai.engine.analytics.ball.components.PartialParabolaHistorySize",
                    partialParabolaHistorySize, PartialParabolaHistorySize, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaFitWindowSize",
                    partialParabolaFitWindowSize, PartialParabolaFitWindowSize, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaMaxVelocity",
                    partialParabolaMaxVelocity, PartialParabolaMaxVelocity, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaMinInliersRatio",
                    partialParabolaMinInliersRatio, PartialParabolaMinInliersRatio, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaScoreThreshold",
                    partialParabolaScoreThreshold, PartialParabolaScoreThreshold, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaMaxIterations",
                    partialParabolaMaxIterations, PartialParabolaMaxIterations, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaMaxVGravity",
                    partialParabolaMaxVGravity, PartialParabolaMaxVGravity, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaGravityAxisIndex",
                    partialParabolaGravityAxisIndex, PartialParabolaGravityAxisIndex, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaGravity",
                    partialParabolaGravity, PartialParabolaGravity, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaStopProbability",
                    partialParabolaStopProbability, PartialParabolaStopProbability, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.PartialParabolaInliersRatio",
                    partialParabolaInliersRatio, PartialParabolaInliersRatio, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaOutlierDetectorWindowSize",
                    parabolaOutlierDetectorWindowSize, ParabolaOutlierDetectorWindowSize, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaOutlierDetectorMinClusterSize",
                    parabolaOutlierDetectorMinClusterSize, ParabolaOutlierDetectorMinClusterSize, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaOutlierDetectorMaxDeltaV",
                    parabolaOutlierDetectorMaxDeltaV, ParabolaOutlierDetectorMaxDeltaV, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaOutlierDetectorMaxTError",
                    parabolaOutlierDetectorMaxTError, ParabolaOutlierDetectorMaxTError, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaOutlierDetectorMaxXError",
                    parabolaOutlierDetectorMaxXError, ParabolaOutlierDetectorMaxXError, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaOutlierDetectorActive",
                    parabolaOutlierDetectorActive, ParabolaOutlierDetectorActive, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.IntersectionDetectorConfigMinDeltaV",
                    intersectionDetectorConfigMinDeltaV, IntersectionDetectorConfigMinDeltaV, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.IntersectionDetectorConfigMaxDeltaV",
                    intersectionDetectorConfigMaxDeltaV, IntersectionDetectorConfigMaxDeltaV, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.IntersectionDetectorConfigMaxTError",
                    intersectionDetectorConfigMaxTError, IntersectionDetectorConfigMaxTError, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.IntersectionDetectorConfigMaxXError",
                    intersectionDetectorConfigMaxXError, IntersectionDetectorConfigMaxXError, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.IntersectionDetectorConfigRelVFactor",
                    intersectionDetectorConfigRelVFactor, IntersectionDetectorConfigRelVFactor, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.TrajectoryFitterConfigMinPoints",
                    trajectoryFitterConfigMinPoints, TrajectoryFitterConfigMinPoints, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.TrajectoryFitterConfigMaxPoints",
                    trajectoryFitterConfigMaxPoints, TrajectoryFitterConfigMaxPoints, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.TrajectoryFitterConfigMinSpeed",
                    trajectoryFitterConfigMinSpeed, TrajectoryFitterConfigMinSpeed, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaBasicConfigBouncingWeightsDimsNorm",
                    parabolaBasicConfigBouncingWeightsDimsNorm, ParabolaBasicConfigBouncingWeightsDimsNorm, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaBasicConfigTimeDiffToMergeIntersections",
                    parabolaBasicConfigTimeDiffToMergeIntersections, ParabolaBasicConfigTimeDiffToMergeIntersections, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaBasicConfigMinDeltaVNorm",
                    parabolaBasicConfigMinDeltaVNorm, ParabolaBasicConfigMinDeltaVNorm, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaBasicConfigMinVNormAmplitudeBounce",
                    parabolaBasicConfigMinVNormAmplitudeBounce, ParabolaBasicConfigMinVNormAmplitudeBounce, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parabola.ParabolaBasicConfigMaxVNormAmplitudeBounce",
                    parabolaBasicConfigMaxVNormAmplitudeBounce, ParabolaBasicConfigMaxVNormAmplitudeBounce, parameters
                );
                return parameters;
            }
        }

        private void AddUnlessDefault<T>(string key, T value, T @default, Dictionary<string, object> parameters) {
            if (value.Equals(@default)) return;
            parameters.Add(key, value);
        }

        public override List<string> PublishedEventIds => eventIds.ToList();

    }
}