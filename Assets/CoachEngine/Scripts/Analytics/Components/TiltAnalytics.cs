/*
 * Copyright (c) 2021 AGT Group (R&D) GmbH. All rights reserved.
 * Redistribution and use in source and binary form without the express
 * permission of the above copyright holder is not permitted.
 */

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// CoachAI Core Version: 13.2.3
// Generated On: 2022-06-13T13:29:09Z
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CoachAiEngine;
using System.Linq;
using UnityEngine;
using UnityEngine.Events;

namespace CoachAiEngine.Analytics {

    [System.CodeDom.Compiler.GeneratedCode(tool: "Coach-Ai engine", version: "13.2.3")]
    [CreateAssetMenu(fileName = nameof(TiltAnalytics), menuName = "Coach-AI Engine/Components/Core/TiltAnalytics")]
    public class TiltAnalytics : CoachComponent {

        public override string ComponentId => "com.coachai.engine.sensors.components.TiltAnalytics";
        private static readonly string[] eventIds =  {
            "com.coachai.engine.sensors.components.DeviceTilt"
        };

        private static readonly List<int> DeviceTiltPerfectVector = new List<int> { 0, 950, 300 };
        private static readonly float DeviceTiltAngleThreshold = 0.2f;
        private static readonly float GravitySensorMovementThreshold = 0.1f;
        private static readonly int DeviceTiltSampleSize = 10;

        [Tooltip("Device Tilt Perfect Vector (x, y, z) as 1000ths of rads")]
        public List<int> deviceTiltPerfectVector = DeviceTiltPerfectVector;
        [Tooltip("Device Angle Threshold in radians")]
        public float deviceTiltAngleThreshold = DeviceTiltAngleThreshold;
        [Tooltip("If device moves in more angle than this average it doesn't produce events")]
        public float gravitySensorMovementThreshold = GravitySensorMovementThreshold;
        [Tooltip("Gravity Sensor Sample Size")]
        public int deviceTiltSampleSize = DeviceTiltSampleSize;

        public override Dictionary<string, object> Parameters {
            get {
                var parameters = new Dictionary<string, object>();

                AddUnlessDefault("com.coachai.engine.sensors.components.DeviceTiltPerfectVector",
                    deviceTiltPerfectVector, DeviceTiltPerfectVector, parameters
                );
                AddUnlessDefault("com.coachai.engine.sensors.components.DeviceTiltAngleThreshold",
                    deviceTiltAngleThreshold, DeviceTiltAngleThreshold, parameters
                );
                AddUnlessDefault("com.coachai.engine.sensors.components.GravitySensorMovementThreshold",
                    gravitySensorMovementThreshold, GravitySensorMovementThreshold, parameters
                );
                AddUnlessDefault("com.coachai.engine.sensors.components.DeviceTiltSampleSize",
                    deviceTiltSampleSize, DeviceTiltSampleSize, parameters
                );
                return parameters;
            }
        }

        private void AddUnlessDefault<T>(string key, T value, T @default, Dictionary<string, object> parameters) {
            if (value.Equals(@default)) return;
            parameters.Add(key, value);
        }

        public override List<string> PublishedEventIds => eventIds.ToList();

    }
}