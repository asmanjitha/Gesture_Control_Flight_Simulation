/*
 * Copyright (c) 2021 AGT Group (R&D) GmbH. All rights reserved.
 * Redistribution and use in source and binary form without the express
 * permission of the above copyright holder is not permitted.
 */

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// CoachAI Core Version: 13.2.3
// Generated On: 2022-06-13T13:29:09Z
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CoachAiEngine;
using System.Linq;
using UnityEngine;
using UnityEngine.Events;

namespace CoachAiEngine.Analytics {

    [System.CodeDom.Compiler.GeneratedCode(tool: "Coach-Ai engine", version: "13.2.3")]
    [CreateAssetMenu(fileName = nameof(PosePresenceAnalytics), menuName = "Coach-AI Engine/Components/HumanBody/PosePresenceAnalytics")]
    public class PosePresenceAnalytics : CoachComponent {

        public override string ComponentId => "com.coachai.engine.analytics.pose.components.PosePresenceAnalytics";
        private static readonly string[] eventIds =  {
            "com.coachai.engine.analytics.pose.PosePresenceUpdate"
        };

        private static readonly float PosePresenceMinimumHeight = 0.3f;
        private static readonly float PosePresenceMaximumHeight = 0.6f;
        private static readonly double PosePresenceMaxChangeFrequency = 2.0;
        private static readonly List<string> PosePresenceHeightJointsFilter = new List<string> {  };
        private static readonly float PosePresenceBodyToHeightJointsRatio = 1.0f;

        [Tooltip("The person height has to be at least this ratio of the camera image height to be accepted as present, to avoid too large distances of the user to the camera. E.g. if [PosePresenceMinimumHeight] is 0.5, that means the person height needs to be at least half the image height. * A value of 0.0 renders this condition to be effectless. * In case of using this parameter together with [UseAdaptiveRegionOfInterest] the minimal viable value is 0.2. * The value should usually not be larger than 0.5")]
        public float posePresenceMinimumHeight = PosePresenceMinimumHeight;
        [Tooltip("The person height has to be at most this ratio of the camera image to be accepted as present, to ensure the user being inside the camera image completely. If [PosePresenceMaximumHeight] is 0.5, that means the person needs to be at most half the image height. * A value of 1.0 disables this threshold. * Because person height is calculated using y.max - y.min using only the visible joints of the pose (those inside the image). * The value should usually not be smaller than 0.5")]
        public float posePresenceMaximumHeight = PosePresenceMaximumHeight;
        [Tooltip("Number of seconds between pose presence updates")]
        public double posePresenceMaxChangeFrequency = PosePresenceMaxChangeFrequency;
        [Tooltip("Joints filter to be taken into account for pose height calculation")]
        public List<string> posePresenceHeightJointsFilter = PosePresenceHeightJointsFilter;
        [Tooltip("Ratio of body to height joints to calculate actual pose height")]
        public float posePresenceBodyToHeightJointsRatio = PosePresenceBodyToHeightJointsRatio;

        public override Dictionary<string, object> Parameters {
            get {
                var parameters = new Dictionary<string, object>();

                AddUnlessDefault("com.coachai.engine.analytics.pose.components.PosePresenceMinimumHeight",
                    posePresenceMinimumHeight, PosePresenceMinimumHeight, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.PosePresenceMaximumHeight",
                    posePresenceMaximumHeight, PosePresenceMaximumHeight, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.PosePresenceMaxChangeFrequency",
                    posePresenceMaxChangeFrequency, PosePresenceMaxChangeFrequency, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.PosePresenceHeightJointsFilter",
                    posePresenceHeightJointsFilter, PosePresenceHeightJointsFilter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.components.PosePresenceBodyToHeightJointsRatio",
                    posePresenceBodyToHeightJointsRatio, PosePresenceBodyToHeightJointsRatio, parameters
                );
                return parameters;
            }
        }

        private void AddUnlessDefault<T>(string key, T value, T @default, Dictionary<string, object> parameters) {
            if (value.Equals(@default)) return;
            parameters.Add(key, value);
        }

        public override List<string> PublishedEventIds => eventIds.ToList();

    }
}