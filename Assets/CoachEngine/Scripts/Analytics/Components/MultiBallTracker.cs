/*
 * Copyright (c) 2021 AGT Group (R&D) GmbH. All rights reserved.
 * Redistribution and use in source and binary form without the express
 * permission of the above copyright holder is not permitted.
 */

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// CoachAI Core Version: 13.2.3
// Generated On: 2022-06-13T13:29:09Z
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CoachAiEngine;
using System.Linq;
using UnityEngine;
using UnityEngine.Events;

namespace CoachAiEngine.Analytics {

    [System.CodeDom.Compiler.GeneratedCode(tool: "Coach-Ai engine", version: "13.2.3")]
    [CreateAssetMenu(fileName = nameof(MultiBallTracker), menuName = "Coach-AI Engine/Components/BallSports/MultiBallTracker")]
    public class MultiBallTracker : CoachComponent {

        public override string ComponentId => "com.coachai.engine.analytics.ball.components.MultiBallTracker";
        private static readonly string[] eventIds =  {
            "com.coachai.engine.analytics.ball.BallDetectorResult",
            "com.coachai.engine.analytics.ball.BallLoc2Visualize",
            "com.coachai.engine.analytics.ball.BallLocation",
            "com.coachai.engine.analytics.ball.multiobjecttracker.BallTracklets",
            "com.coachai.engine.analytics.ball.ExtrapolatedBallLocation",
            "com.coachai.engine.analytics.ball.MultiBallLocations"
        };

        private static readonly BallModelType BallModel = BallModelType.BallBox1fMidRangeMediumV10;
        private static readonly float BallDetectorConfidenceThreshold = 0.0f;
        private static readonly LocalizationTypeParameterType LocalizationTypeParameter = LocalizationTypeParameterType.SIZE_ONLY;
        private static readonly bool LocalizationOnGroundInfinitePlane = true;
        private static readonly float LocalizationOnPlanePreferredYLocation = float.NaN;
        private static readonly float LocalizationOnGroundMaxYDeviation = 0.5f;
        private static readonly float MOTDetectionMaxLiveTimeParameter = 2.0f;
        private static readonly int MOTTrackMinLengthParameter = 5;
        private static readonly float MOTDontSelectTracksOlder = 0.5f;
        private static readonly float MOTTrackMedianConfidenceThresholdParameter = 0.5f;
        private static readonly MOTAssignmentMethodParameterType MOTAssignmentMethodParameter = MOTAssignmentMethodParameterType.Greedy;
        private static readonly int MOTMatchingThresholdParameter = 50;
        private static readonly float BallDiameter = 0.22f;
        private static readonly float DiscardBelowGroundTolerance = 3.4028235E38f;
        private static readonly int MaximumInboundQueueSize = 2;
        private static readonly bool PublishTrajectoryEvent = true;

        [Tooltip("Choose a ball model. Please read model documentation to be aware of the use cases and limitations.")]
        public BallModelType ballModel = BallModel;
        [Tooltip("Filter out ball detections with a confidence below this threshold. On value of 0 this threshold is being overridden by model specific defaults (recommended).")]
        public float ballDetectorConfidenceThreshold = BallDetectorConfidenceThreshold;
        [Tooltip("Localization Method to estimate 3D location of ball")]
        public LocalizationTypeParameterType localizationTypeParameter = LocalizationTypeParameter;
        [Tooltip("Localization on plane does not check extent. If disabled extent of each plane is considered.")]
        public bool localizationOnGroundInfinitePlane = LocalizationOnGroundInfinitePlane;
        [Tooltip("Localization on plane uses plane closest to provided preferred y location. This parameter can be updated at runtime [MultiBallTrackerConfig] Disabled with Float.NaN value!")]
        public float localizationOnPlanePreferredYLocation = LocalizationOnPlanePreferredYLocation;
        [Tooltip("If results of localizeOnPlane and localize differ more than this in Y direction (usually gravity direction), the result is discarded.")]
        public float localizationOnGroundMaxYDeviation = LocalizationOnGroundMaxYDeviation;
        [Tooltip("Remove object tracks being inactive for longer than this period.")]
        public float mOTDetectionMaxLiveTimeParameter = MOTDetectionMaxLiveTimeParameter;
        [Tooltip("An object track with less than this minimum amount of detections cannot be detected as active.")]
        public int mOTTrackMinLengthParameter = MOTTrackMinLengthParameter;
        [Tooltip("An object track being inactive for longer than this period cannot be detected as active.")]
        public float mOTDontSelectTracksOlder = MOTDontSelectTracksOlder;
        [Tooltip("An object track with a median confidence of all contained detections lower than this value cannot be detected as active.")]
        public float mOTTrackMedianConfidenceThresholdParameter = MOTTrackMedianConfidenceThresholdParameter;
        [Tooltip("Method to assign detections to object tracks. Hungarian: complete match with minimal error. Greedy: successive best match")]
        public MOTAssignmentMethodParameterType mOTAssignmentMethodParameter = MOTAssignmentMethodParameter;
        [Tooltip("To assign detections to already existing tracks the score between the detection and the prediction of the track must not exceed this threshold. Increase this value if you have faster moving objects or low frame rates. Lower this value if you have many slower moving objects or high frames rates. When the score is above the threshold then a new track is created from this detection.")]
        public int mOTMatchingThresholdParameter = MOTMatchingThresholdParameter;
        [Tooltip("Actual real diameter of ball to estimate the 3D ball position from the 2D ball detection based on the detected pixel size of the ball. This parameter can be updated at runtime [MultiBallTrackerConfig]")]
        public float ballDiameter = BallDiameter;
        [Tooltip("Define the maximum distance of detections below scanned ground plane to be discarded [m].")]
        public float discardBelowGroundTolerance = DiscardBelowGroundTolerance;
        [Tooltip("Set maximum allowed inbound events to put into processing queue")]
        public int maximumInboundQueueSize = MaximumInboundQueueSize;
        [Tooltip("Enable to publish Trajectory events for dependent analytics. Trajectory contains a list of [BallLocations] and [timestamps].")]
        public bool publishTrajectoryEvent = PublishTrajectoryEvent;

        public override Dictionary<string, object> Parameters {
            get {
                var parameters = new Dictionary<string, object>();

                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.BallModel",
                    BallModelTypeLookup[ballModel], BallModelTypeLookup[BallModel], parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.BallDetectorConfidenceThreshold",
                    ballDetectorConfidenceThreshold, BallDetectorConfidenceThreshold, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationTypeParameter",
                    LocalizationTypeParameterTypeLookup[localizationTypeParameter], LocalizationTypeParameterTypeLookup[LocalizationTypeParameter], parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationOnGroundInfinitePlane",
                    localizationOnGroundInfinitePlane, LocalizationOnGroundInfinitePlane, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationOnPlanePreferredYLocation",
                    localizationOnPlanePreferredYLocation, LocalizationOnPlanePreferredYLocation, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.LocalizationOnGroundMaxYDeviation",
                    localizationOnGroundMaxYDeviation, LocalizationOnGroundMaxYDeviation, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTDetectionMaxLiveTimeParameter",
                    mOTDetectionMaxLiveTimeParameter, MOTDetectionMaxLiveTimeParameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTTrackMinLengthParameter",
                    mOTTrackMinLengthParameter, MOTTrackMinLengthParameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTDontSelectTracksOlder",
                    mOTDontSelectTracksOlder, MOTDontSelectTracksOlder, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTTrackMedianConfidenceThresholdParameter",
                    mOTTrackMedianConfidenceThresholdParameter, MOTTrackMedianConfidenceThresholdParameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTAssignmentMethodParameter",
                    MOTAssignmentMethodParameterTypeLookup[mOTAssignmentMethodParameter], MOTAssignmentMethodParameterTypeLookup[MOTAssignmentMethodParameter], parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MOTMatchingThresholdParameter",
                    mOTMatchingThresholdParameter, MOTMatchingThresholdParameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.BallDiameter",
                    ballDiameter, BallDiameter, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.DiscardBelowGroundTolerance",
                    discardBelowGroundTolerance, DiscardBelowGroundTolerance, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.MaximumInboundQueueSize",
                    maximumInboundQueueSize, MaximumInboundQueueSize, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.ball.parameters.PublishTrajectoryEvent",
                    publishTrajectoryEvent, PublishTrajectoryEvent, parameters
                );
                return parameters;
            }
        }

        private void AddUnlessDefault<T>(string key, T value, T @default, Dictionary<string, object> parameters) {
            if (value.Equals(@default)) return;
            parameters.Add(key, value);
        }

        public override List<string> PublishedEventIds => eventIds.ToList();

        public enum BallModelType {
            BallBox1fLongRangeMaxV4,
            BallBox1fMidRangeMediumV10,
            BallBox1fMidRangeMediumV9,
            BallBox1fMidRangeMediumV6,
            BallBox1fShortRangeLightV6,
            BallBox1fShortRangeLightV2,
            BallBoxOffset2fShortRangeLightV6,
            BallBoxOffset2fShortRangeLightV4,
            BallBoxOffset2fMidRangeMediumV8,
            BallBoxOffset2fMidRangeMediumV7
        }

        public Dictionary<BallModelType, string> BallModelTypeLookup = new Dictionary<BallModelType, string> {
            { BallModelType.BallBox1fLongRangeMaxV4, "ball.box.1f.long-range.max v4" },
            { BallModelType.BallBox1fMidRangeMediumV10, "ball.box.1f.mid-range.medium v10" },
            { BallModelType.BallBox1fMidRangeMediumV9, "ball.box.1f.mid-range.medium v9" },
            { BallModelType.BallBox1fMidRangeMediumV6, "ball.box.1f.mid-range.medium v6 (Deprecated)" },
            { BallModelType.BallBox1fShortRangeLightV6, "ball.box.1f.short-range.light v6" },
            { BallModelType.BallBox1fShortRangeLightV2, "ball.box.1f.short-range.light v2 (Deprecated)" },
            { BallModelType.BallBoxOffset2fShortRangeLightV6, "ball.box-offset.2f.short-range.light v6" },
            { BallModelType.BallBoxOffset2fShortRangeLightV4, "ball.box-offset.2f.short-range.light v4 (Deprecated)" },
            { BallModelType.BallBoxOffset2fMidRangeMediumV8, "ball.box-offset.2f.mid-range.medium v8" },
            { BallModelType.BallBoxOffset2fMidRangeMediumV7, "ball.box-offset.2f.mid-range.medium v7 (Deprecated)" }
        };

        public enum LocalizationTypeParameterType {
            SIZE_ONLY,
            ON_GROUND_PLANE_ONLY,
            ON_GROUND_PLANE_HYBRID
        }

        public Dictionary<LocalizationTypeParameterType, string> LocalizationTypeParameterTypeLookup = new Dictionary<LocalizationTypeParameterType, string> {
            { LocalizationTypeParameterType.SIZE_ONLY, "SIZE_ONLY" },
            { LocalizationTypeParameterType.ON_GROUND_PLANE_ONLY, "ON_GROUND_PLANE_ONLY" },
            { LocalizationTypeParameterType.ON_GROUND_PLANE_HYBRID, "ON_GROUND_PLANE_HYBRID" }
        };

        public enum MOTAssignmentMethodParameterType {
            Hungarian,
            Greedy
        }

        public Dictionary<MOTAssignmentMethodParameterType, string> MOTAssignmentMethodParameterTypeLookup = new Dictionary<MOTAssignmentMethodParameterType, string> {
            { MOTAssignmentMethodParameterType.Hungarian, "Hungarian" },
            { MOTAssignmentMethodParameterType.Greedy, "Greedy" }
        };

    }
}