/*
 * Copyright (c) 2021 AGT Group (R&D) GmbH. All rights reserved.
 * Redistribution and use in source and binary form without the express
 * permission of the above copyright holder is not permitted.
 */

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// CoachAI Core Version: 13.2.3
// Generated On: 2022-06-13T13:29:09Z
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CoachAiEngine;
using System.Linq;
using UnityEngine;
using UnityEngine.Events;

namespace CoachAiEngine.Analytics {

    [System.CodeDom.Compiler.GeneratedCode(tool: "Coach-Ai engine", version: "13.2.3")]
    [CreateAssetMenu(fileName = nameof(KickoffDetectionAnalytics), menuName = "Coach-AI Engine/Components/Generic/KickoffDetectionAnalytics")]
    public class KickoffDetectionAnalytics : CoachComponent {

        public override string ComponentId => "com.coachai.engine.analytics.ball.components.KickoffDetectionAnalytics";
        private static readonly string[] eventIds =  {
            "com.coachai.engine.analytics.ball.parabola.FittedParabolaResult",
            "com.coachai.engine.analytics.ball.pipeline.ParabolaImpact",
            "com.coachai.engine.analytics.ball.pipeline.ParabolaComplete",
            "com.coachai.engine.analytics.ball.pipeline.ParabolaPartial"
        };

        private static readonly int KalmanFilterCorrectionSteps = 4;
        private static readonly int MaxAngleDeviation = 10;
        private static readonly int MinSegmentLength = 4;
        private static readonly int FilterWindowSize = 11;

        [Tooltip("Correct lagging of Kalman filter by n frames")]
        public int kalmanFilterCorrectionSteps = KalmanFilterCorrectionSteps;
        [Tooltip("Max deviation angle in degrees for grouping similar directions")]
        public int maxAngleDeviation = MaxAngleDeviation;
        [Tooltip("Minimum number of points with same direction")]
        public int minSegmentLength = MinSegmentLength;
        [Tooltip("Window size for median filter of velocities")]
        public int filterWindowSize = FilterWindowSize;

        public override Dictionary<string, object> Parameters {
            get {
                var parameters = new Dictionary<string, object>();

                AddUnlessDefault("KalmanFilterCorrectionSteps",
                    kalmanFilterCorrectionSteps, KalmanFilterCorrectionSteps, parameters
                );
                AddUnlessDefault("MaxAngleDeviation",
                    maxAngleDeviation, MaxAngleDeviation, parameters
                );
                AddUnlessDefault("MinSegmentLength",
                    minSegmentLength, MinSegmentLength, parameters
                );
                AddUnlessDefault("FilterWindowSize",
                    filterWindowSize, FilterWindowSize, parameters
                );
                return parameters;
            }
        }

        private void AddUnlessDefault<T>(string key, T value, T @default, Dictionary<string, object> parameters) {
            if (value.Equals(@default)) return;
            parameters.Add(key, value);
        }

        public override List<string> PublishedEventIds => eventIds.ToList();

    }
}