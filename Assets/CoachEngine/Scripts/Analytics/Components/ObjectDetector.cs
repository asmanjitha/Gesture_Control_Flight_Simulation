/*
 * Copyright (c) 2021 AGT Group (R&D) GmbH. All rights reserved.
 * Redistribution and use in source and binary form without the express
 * permission of the above copyright holder is not permitted.
 */

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// CoachAI Core Version: 13.2.3
// Generated On: 2022-06-13T13:29:09Z
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CoachAiEngine;
using System.Linq;
using UnityEngine;
using UnityEngine.Events;

namespace CoachAiEngine.Analytics {

    [System.CodeDom.Compiler.GeneratedCode(tool: "Coach-Ai engine", version: "13.2.3")]
    [CreateAssetMenu(fileName = nameof(ObjectDetector), menuName = "Coach-AI Engine/Components/Generic/ObjectDetector (Experimental)")]
    public class ObjectDetector : CoachComponent {

        public override string ComponentId => "com.coachai.engine.analytics.objectdetection.components.ObjectDetector";
        private static readonly string[] eventIds =  {
            "com.coachai.engine.analytics.objectdetection.model.ObjectDetectionResult2D"
        };

        private static readonly ObjectDetectionModelParameterType ObjectDetectionModelParameter = ObjectDetectionModelParameterType.ReferenceMediaPipeSSDLite;

        [Tooltip("Choose a model. Please read model documentation to be aware of the use cases and limitations.")]
        public ObjectDetectionModelParameterType objectDetectionModelParameter = ObjectDetectionModelParameter;

        public override Dictionary<string, object> Parameters {
            get {
                var parameters = new Dictionary<string, object>();

                AddUnlessDefault("com.coachai.engine.analytics.objectdetection.parameters.ObjectDetectionModelParameter",
                    ObjectDetectionModelParameterTypeLookup[objectDetectionModelParameter], ObjectDetectionModelParameterTypeLookup[ObjectDetectionModelParameter], parameters
                );
                return parameters;
            }
        }

        private void AddUnlessDefault<T>(string key, T value, T @default, Dictionary<string, object> parameters) {
            if (value.Equals(@default)) return;
            parameters.Add(key, value);
        }

        public override List<string> PublishedEventIds => eventIds.ToList();

        public enum ObjectDetectionModelParameterType {
            ObjectBox80c1fGeneralMax,
            ObjectBox80c1fGeneralMaxV1,
            ObjectBox80c1fGeneralMedium,
            ObjectBox80c1fGeneralCenterNetLight,
            ObjectBox80c1fGeneralMobileV1SsdLight,
            ReferenceMediaPipeSSDLite
        }

        public Dictionary<ObjectDetectionModelParameterType, string> ObjectDetectionModelParameterTypeLookup = new Dictionary<ObjectDetectionModelParameterType, string> {
            { ObjectDetectionModelParameterType.ObjectBox80c1fGeneralMax, "object.box-80c.1f.general.max v4" },
            { ObjectDetectionModelParameterType.ObjectBox80c1fGeneralMaxV1, "object.box-80c.1f.general.max v1 (Experimental)" },
            { ObjectDetectionModelParameterType.ObjectBox80c1fGeneralMedium, "object.box-80c.1f.general.medium v1" },
            { ObjectDetectionModelParameterType.ObjectBox80c1fGeneralCenterNetLight, "object.box-80c.1f.general-centernet.light v1 (Experimental)" },
            { ObjectDetectionModelParameterType.ObjectBox80c1fGeneralMobileV1SsdLight, "object.box-80c.1f.general-mobile-v1-ssd.light v1 (Experimental)" },
            { ObjectDetectionModelParameterType.ReferenceMediaPipeSSDLite, "reference.mediapipe_ssdlite_object_detection v1 (Experimental)" }
        };

    }
}