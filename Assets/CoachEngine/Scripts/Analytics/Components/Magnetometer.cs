/*
 * Copyright (c) 2021 AGT Group (R&D) GmbH. All rights reserved.
 * Redistribution and use in source and binary form without the express
 * permission of the above copyright holder is not permitted.
 */

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// CoachAI Core Version: 13.2.3
// Generated On: 2022-06-13T13:29:09Z
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CoachAiEngine;
using System.Linq;
using UnityEngine;
using UnityEngine.Events;

namespace CoachAiEngine.Analytics {

    [System.CodeDom.Compiler.GeneratedCode(tool: "Coach-Ai engine", version: "13.2.3")]
    [CreateAssetMenu(fileName = nameof(Magnetometer), menuName = "Coach-AI Engine/Components/Core/Magnetometer")]
    public class Magnetometer : CoachComponent {

        public override string ComponentId => "com.coachai.engine.sensors.components.SensorComponent.Magnetometer";
        private static readonly string[] eventIds =  {
            "com.coachai.engine.sensors.MagnetometerData"
        };

        private static readonly int SamplingRate = 10;

        [Tooltip("The sensor's sample rate. The period between two measurements is 1 / rate.")]
        public int samplingRate = SamplingRate;

        public override Dictionary<string, object> Parameters {
            get {
                var parameters = new Dictionary<string, object>();

                AddUnlessDefault("magnetometer.com.coachai.engine.sensors.components.SamplingRate",
                    samplingRate, SamplingRate, parameters
                );
                return parameters;
            }
        }

        private void AddUnlessDefault<T>(string key, T value, T @default, Dictionary<string, object> parameters) {
            if (value.Equals(@default)) return;
            parameters.Add(key, value);
        }

        public override List<string> PublishedEventIds => eventIds.ToList();

    }
}