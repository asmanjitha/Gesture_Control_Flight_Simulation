/*
 * Copyright (c) 2021 AGT Group (R&D) GmbH. All rights reserved.
 * Redistribution and use in source and binary form without the express
 * permission of the above copyright holder is not permitted.
 */

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// CoachAI Core Version: 13.2.3
// Generated On: 2022-06-13T13:29:09Z
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CoachAiEngine;
using System.Linq;
using UnityEngine;
using UnityEngine.Events;

namespace CoachAiEngine.Analytics {

    [System.CodeDom.Compiler.GeneratedCode(tool: "Coach-Ai engine", version: "13.2.3")]
    [CreateAssetMenu(fileName = nameof(PersonDetectorAnalytics), menuName = "Coach-AI Engine/Components/HumanBody/PersonDetectorAnalytics")]
    public class PersonDetectorAnalytics : CoachComponent {

        public override string ComponentId => "com.coachai.engine.analytics.pose.components.PersonDetectorAnalytics";
        private static readonly string[] eventIds =  {
            "com.coachai.engine.analytics.pose.PersonDetectorResult"
        };

        private static readonly PersonModelType PersonModel = PersonModelType.PersonBox1fLongRangeLightV1;
        private static readonly int MaximumInboundQueueSize = 2;
        private static readonly int MaximumPipelineThreads = 2;
        private static readonly int TargetFPS = 30;

        [Tooltip("Choose a person model. Please read model documentation to be aware of the use cases and limitations.")]
        public PersonModelType personModel = PersonModel;
        [Tooltip("Set maximum allowed inbound events to put into processing queue")]
        public int maximumInboundQueueSize = MaximumInboundQueueSize;
        [Tooltip("Defines how many threads are used to concurrently process inbound events.")]
        public int maximumPipelineThreads = MaximumPipelineThreads;
        [Tooltip("Set maximum allowed processed frames per second")]
        public int targetFPS = TargetFPS;

        public override Dictionary<string, object> Parameters {
            get {
                var parameters = new Dictionary<string, object>();

                AddUnlessDefault("com.coachai.engine.analytics.pose.components.PersonModel",
                    PersonModelTypeLookup[personModel], PersonModelTypeLookup[PersonModel], parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.parameters.MaximumInboundQueueSize",
                    maximumInboundQueueSize, MaximumInboundQueueSize, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.parameters.MaximumPipelineThreads",
                    maximumPipelineThreads, MaximumPipelineThreads, parameters
                );
                AddUnlessDefault("com.coachai.engine.analytics.pose.parameters.TargetFPS",
                    targetFPS, TargetFPS, parameters
                );
                return parameters;
            }
        }

        private void AddUnlessDefault<T>(string key, T value, T @default, Dictionary<string, object> parameters) {
            if (value.Equals(@default)) return;
            parameters.Add(key, value);
        }

        public override List<string> PublishedEventIds => eventIds.ToList();

        public enum PersonModelType {
            PersonBox1fLongRangeLightV1,
            PersonBox1fMidRangeUltralightV1
        }

        public Dictionary<PersonModelType, string> PersonModelTypeLookup = new Dictionary<PersonModelType, string> {
            { PersonModelType.PersonBox1fLongRangeLightV1, "person.box.1f.long-range.light v1" },
            { PersonModelType.PersonBox1fMidRangeUltralightV1, "person.box.1f.mid-range.ultralight v1 (Experimental)" }
        };

    }
}